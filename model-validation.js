"use strict"; export const validateAccount = validate10; const schema11 = { "$id": "https://data.landsofhope.com/schemas/v0/accounts/account.json", "type": "object", "additionalProperties": false, "properties": { "$type": { "const": "/v0/accounts/account" }, "AccountID": { "type": "integer" }, "AccountName": { "type": "string", "maxLength": 36 }, "AccountEmail": { "type": "string", "maxLength": 50 }, "TransactionID": { "oneOf": [{ "type": "string", "maxLength": 50 }, { "type": "null" }] }, "System": { "type": "integer" }, "LastActive": { "$ref": "/schemas/v0/datetime.json" }, "FirstActive": { "$ref": "/schemas/v0/datetime.json" }, "Banned": { "oneOf": [{ "type": "integer" }, { "type": "null" }] }, "BannedDate": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "LastIPAddress1": { "oneOf": [{ "type": "string", "maxLength": 16 }, { "type": "null" }] }, "Type": { "type": "integer" }, "P2PDate": { "$ref": "/schemas/v0/datetime.json" }, "Donation": { "type": "integer" }, "Slots": { "type": "integer" }, "Referrer": { "type": "integer" }, "Dollars": { "type": "number" }, "InstallPath": { "oneOf": [{ "type": "string", "maxLength": 65 }, { "type": "null" }] }, "BoughtRaces": { "oneOf": [{ "type": "string", "maxLength": 65 }, { "type": "null" }] }, "BoughtProfs": { "oneOf": [{ "type": "string", "maxLength": 65 }, { "type": "null" }] }, "CanEmail": { "type": "integer" }, "EmailVerified": { "type": "integer" }, "EVC": { "type": "string", "maxLength": 20 }, "FoundHow": { "type": "integer" }, "TrialPeriod": { "type": "integer" }, "EmailStatus": { "type": "integer" }, "PaidAmount": { "type": "integer" }, "Theme": { "type": "string", "maxLength": 20 }, "WebPaid": { "type": "integer" }, "WebMode": { "type": "integer" }, "AccountPermission": { "type": "integer" }, "LastPatchInstalled": { "type": "number" }, "CountryCode": { "type": "string", "maxLength": 2 }, "DateofBirth": { "$ref": "/schemas/v0/datetime.json" }, "ChatIsDisabled": { "type": "integer" }, "CharactersOnAccount": { "type": "integer" }, "ExpansionPacks": { "type": "string", "maxLength": 10 }, "CardLimit": { "type": "integer" }, "CanEmailAuction": { "type": "integer" }, "AccountChatOff": { "type": "integer" }, "FiveCount": { "type": "integer" }, "ReferralPoints": { "type": "integer" }, "ReferralGoldPoints": { "type": "integer" }, "MainStyle": { "type": "integer" }, "AccountCredits": { "type": "integer" }, "NewspaperPoints": { "type": "integer" }, "TotalNewspaperPoints": { "type": "integer" }, "WindowDetails": { "type": "string", "maxLength": 1000 }, "MiniCredits": { "type": "integer" }, "OldPassword": { "type": "string", "maxLength": 20 }, "OldPasswordReset": { "type": "integer" }, "AccountPassword": { "type": "string", "maxLength": 50 }, "Reward": { "type": "integer" }, "FacebookID": { "type": "string", "maxLength": 50 } }, "required": ["$type", "AccountID", "AccountName", "AccountEmail", "System", "Type", "Donation", "Referrer", "Dollars", "EmailVerified", "FoundHow", "TrialPeriod", "EmailStatus", "PaidAmount", "Theme", "WebPaid", "WebMode", "AccountPermission", "LastPatchInstalled", "CountryCode", "ChatIsDisabled", "CharactersOnAccount", "ExpansionPacks", "CardLimit", "CanEmailAuction", "AccountChatOff", "FiveCount", "ReferralPoints", "ReferralGoldPoints", "MainStyle", "AccountCredits", "NewspaperPoints", "TotalNewspaperPoints", "WindowDetails", "MiniCredits", "AccountPassword"], "title": "Account" }; const schema12 = { "$id": "https://data.landsofhope.com/schemas/v0/datetime.json", "type": "string", "pattern": "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}", "title": "DateTime" }; const func2 = Object.prototype.hasOwnProperty; const func3 = require("ajv/dist/runtime/ucs2length").default; const pattern0 = new RegExp("^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}", "u"); function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((((((((((((((((((((((((((((((((((data.$type === undefined) && (missing0 = "$type")) || ((data.AccountID === undefined) && (missing0 = "AccountID"))) || ((data.AccountName === undefined) && (missing0 = "AccountName"))) || ((data.AccountEmail === undefined) && (missing0 = "AccountEmail"))) || ((data.System === undefined) && (missing0 = "System"))) || ((data.Type === undefined) && (missing0 = "Type"))) || ((data.Donation === undefined) && (missing0 = "Donation"))) || ((data.Referrer === undefined) && (missing0 = "Referrer"))) || ((data.Dollars === undefined) && (missing0 = "Dollars"))) || ((data.EmailVerified === undefined) && (missing0 = "EmailVerified"))) || ((data.FoundHow === undefined) && (missing0 = "FoundHow"))) || ((data.TrialPeriod === undefined) && (missing0 = "TrialPeriod"))) || ((data.EmailStatus === undefined) && (missing0 = "EmailStatus"))) || ((data.PaidAmount === undefined) && (missing0 = "PaidAmount"))) || ((data.Theme === undefined) && (missing0 = "Theme"))) || ((data.WebPaid === undefined) && (missing0 = "WebPaid"))) || ((data.WebMode === undefined) && (missing0 = "WebMode"))) || ((data.AccountPermission === undefined) && (missing0 = "AccountPermission"))) || ((data.LastPatchInstalled === undefined) && (missing0 = "LastPatchInstalled"))) || ((data.CountryCode === undefined) && (missing0 = "CountryCode"))) || ((data.ChatIsDisabled === undefined) && (missing0 = "ChatIsDisabled"))) || ((data.CharactersOnAccount === undefined) && (missing0 = "CharactersOnAccount"))) || ((data.ExpansionPacks === undefined) && (missing0 = "ExpansionPacks"))) || ((data.CardLimit === undefined) && (missing0 = "CardLimit"))) || ((data.CanEmailAuction === undefined) && (missing0 = "CanEmailAuction"))) || ((data.AccountChatOff === undefined) && (missing0 = "AccountChatOff"))) || ((data.FiveCount === undefined) && (missing0 = "FiveCount"))) || ((data.ReferralPoints === undefined) && (missing0 = "ReferralPoints"))) || ((data.ReferralGoldPoints === undefined) && (missing0 = "ReferralGoldPoints"))) || ((data.MainStyle === undefined) && (missing0 = "MainStyle"))) || ((data.AccountCredits === undefined) && (missing0 = "AccountCredits"))) || ((data.NewspaperPoints === undefined) && (missing0 = "NewspaperPoints"))) || ((data.TotalNewspaperPoints === undefined) && (missing0 = "TotalNewspaperPoints"))) || ((data.WindowDetails === undefined) && (missing0 = "WindowDetails"))) || ((data.MiniCredits === undefined) && (missing0 = "MiniCredits"))) || ((data.AccountPassword === undefined) && (missing0 = "AccountPassword"))) { validate10.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func2.call(schema11.properties, key0))) { validate10.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.$type !== undefined) { const _errs2 = errors; if ("/v0/accounts/account" !== data.$type) { validate10.errors = [{ instancePath: instancePath + "/$type", schemaPath: "#/properties/%24type/const", keyword: "const", params: { allowedValue: "/v0/accounts/account" }, message: "must be equal to constant" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.AccountID !== undefined) { let data1 = data.AccountID; const _errs3 = errors; if (!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))) { validate10.errors = [{ instancePath: instancePath + "/AccountID", schemaPath: "#/properties/AccountID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs3 === errors; } else { var valid0 = true; } if (valid0) { if (data.AccountName !== undefined) { let data2 = data.AccountName; const _errs5 = errors; if (errors === _errs5) { if (typeof data2 === "string") { if (func3(data2) > 36) { validate10.errors = [{ instancePath: instancePath + "/AccountName", schemaPath: "#/properties/AccountName/maxLength", keyword: "maxLength", params: { limit: 36 }, message: "must NOT have more than 36 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/AccountName", schemaPath: "#/properties/AccountName/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.AccountEmail !== undefined) { let data3 = data.AccountEmail; const _errs7 = errors; if (errors === _errs7) { if (typeof data3 === "string") { if (func3(data3) > 50) { validate10.errors = [{ instancePath: instancePath + "/AccountEmail", schemaPath: "#/properties/AccountEmail/maxLength", keyword: "maxLength", params: { limit: 50 }, message: "must NOT have more than 50 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/AccountEmail", schemaPath: "#/properties/AccountEmail/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.TransactionID !== undefined) { let data4 = data.TransactionID; const _errs9 = errors; const _errs10 = errors; let valid1 = false; let passing0 = null; const _errs11 = errors; if (errors === _errs11) { if (typeof data4 === "string") { if (func3(data4) > 50) { const err0 = { instancePath: instancePath + "/TransactionID", schemaPath: "#/properties/TransactionID/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 50 }, message: "must NOT have more than 50 characters" }; if (vErrors === null) { vErrors = [err0]; } else { vErrors.push(err0); } errors++; } } else { const err1 = { instancePath: instancePath + "/TransactionID", schemaPath: "#/properties/TransactionID/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err1]; } else { vErrors.push(err1); } errors++; } } var _valid0 = _errs11 === errors; if (_valid0) { valid1 = true; passing0 = 0; } const _errs13 = errors; if (data4 !== null) { const err2 = { instancePath: instancePath + "/TransactionID", schemaPath: "#/properties/TransactionID/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err2]; } else { vErrors.push(err2); } errors++; } var _valid0 = _errs13 === errors; if (_valid0 && valid1) { valid1 = false; passing0 = [passing0, 1]; } else { if (_valid0) { valid1 = true; passing0 = 1; } } if (!valid1) { const err3 = { instancePath: instancePath + "/TransactionID", schemaPath: "#/properties/TransactionID/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err3]; } else { vErrors.push(err3); } errors++; validate10.errors = vErrors; return false; } else { errors = _errs10; if (vErrors !== null) { if (_errs10) { vErrors.length = _errs10; } else { vErrors = null; } } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.System !== undefined) { let data5 = data.System; const _errs15 = errors; if (!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))) { validate10.errors = [{ instancePath: instancePath + "/System", schemaPath: "#/properties/System/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastActive !== undefined) { let data6 = data.LastActive; const _errs17 = errors; const _errs18 = errors; if (errors === _errs18) { if (typeof data6 === "string") { if (!pattern0.test(data6)) { validate10.errors = [{ instancePath: instancePath + "/LastActive", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/LastActive", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs17 === errors; } else { var valid0 = true; } if (valid0) { if (data.FirstActive !== undefined) { let data7 = data.FirstActive; const _errs20 = errors; const _errs21 = errors; if (errors === _errs21) { if (typeof data7 === "string") { if (!pattern0.test(data7)) { validate10.errors = [{ instancePath: instancePath + "/FirstActive", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/FirstActive", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs20 === errors; } else { var valid0 = true; } if (valid0) { if (data.Banned !== undefined) { let data8 = data.Banned; const _errs23 = errors; const _errs24 = errors; let valid4 = false; let passing1 = null; const _errs25 = errors; if (!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))) { const err4 = { instancePath: instancePath + "/Banned", schemaPath: "#/properties/Banned/oneOf/0/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }; if (vErrors === null) { vErrors = [err4]; } else { vErrors.push(err4); } errors++; } var _valid1 = _errs25 === errors; if (_valid1) { valid4 = true; passing1 = 0; } const _errs27 = errors; if (data8 !== null) { const err5 = { instancePath: instancePath + "/Banned", schemaPath: "#/properties/Banned/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err5]; } else { vErrors.push(err5); } errors++; } var _valid1 = _errs27 === errors; if (_valid1 && valid4) { valid4 = false; passing1 = [passing1, 1]; } else { if (_valid1) { valid4 = true; passing1 = 1; } } if (!valid4) { const err6 = { instancePath: instancePath + "/Banned", schemaPath: "#/properties/Banned/oneOf", keyword: "oneOf", params: { passingSchemas: passing1 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err6]; } else { vErrors.push(err6); } errors++; validate10.errors = vErrors; return false; } else { errors = _errs24; if (vErrors !== null) { if (_errs24) { vErrors.length = _errs24; } else { vErrors = null; } } } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.BannedDate !== undefined) { let data9 = data.BannedDate; const _errs29 = errors; const _errs30 = errors; let valid5 = false; let passing2 = null; const _errs31 = errors; const _errs32 = errors; if (errors === _errs32) { if (typeof data9 === "string") { if (!pattern0.test(data9)) { const err7 = { instancePath: instancePath + "/BannedDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err7]; } else { vErrors.push(err7); } errors++; } } else { const err8 = { instancePath: instancePath + "/BannedDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err8]; } else { vErrors.push(err8); } errors++; } } var _valid2 = _errs31 === errors; if (_valid2) { valid5 = true; passing2 = 0; } const _errs34 = errors; if (data9 !== null) { const err9 = { instancePath: instancePath + "/BannedDate", schemaPath: "#/properties/BannedDate/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err9]; } else { vErrors.push(err9); } errors++; } var _valid2 = _errs34 === errors; if (_valid2 && valid5) { valid5 = false; passing2 = [passing2, 1]; } else { if (_valid2) { valid5 = true; passing2 = 1; } } if (!valid5) { const err10 = { instancePath: instancePath + "/BannedDate", schemaPath: "#/properties/BannedDate/oneOf", keyword: "oneOf", params: { passingSchemas: passing2 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err10]; } else { vErrors.push(err10); } errors++; validate10.errors = vErrors; return false; } else { errors = _errs30; if (vErrors !== null) { if (_errs30) { vErrors.length = _errs30; } else { vErrors = null; } } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastIPAddress1 !== undefined) { let data10 = data.LastIPAddress1; const _errs36 = errors; const _errs37 = errors; let valid7 = false; let passing3 = null; const _errs38 = errors; if (errors === _errs38) { if (typeof data10 === "string") { if (func3(data10) > 16) { const err11 = { instancePath: instancePath + "/LastIPAddress1", schemaPath: "#/properties/LastIPAddress1/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 16 }, message: "must NOT have more than 16 characters" }; if (vErrors === null) { vErrors = [err11]; } else { vErrors.push(err11); } errors++; } } else { const err12 = { instancePath: instancePath + "/LastIPAddress1", schemaPath: "#/properties/LastIPAddress1/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err12]; } else { vErrors.push(err12); } errors++; } } var _valid3 = _errs38 === errors; if (_valid3) { valid7 = true; passing3 = 0; } const _errs40 = errors; if (data10 !== null) { const err13 = { instancePath: instancePath + "/LastIPAddress1", schemaPath: "#/properties/LastIPAddress1/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err13]; } else { vErrors.push(err13); } errors++; } var _valid3 = _errs40 === errors; if (_valid3 && valid7) { valid7 = false; passing3 = [passing3, 1]; } else { if (_valid3) { valid7 = true; passing3 = 1; } } if (!valid7) { const err14 = { instancePath: instancePath + "/LastIPAddress1", schemaPath: "#/properties/LastIPAddress1/oneOf", keyword: "oneOf", params: { passingSchemas: passing3 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err14]; } else { vErrors.push(err14); } errors++; validate10.errors = vErrors; return false; } else { errors = _errs37; if (vErrors !== null) { if (_errs37) { vErrors.length = _errs37; } else { vErrors = null; } } } var valid0 = _errs36 === errors; } else { var valid0 = true; } if (valid0) { if (data.Type !== undefined) { let data11 = data.Type; const _errs42 = errors; if (!(((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11))) && (isFinite(data11)))) { validate10.errors = [{ instancePath: instancePath + "/Type", schemaPath: "#/properties/Type/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs42 === errors; } else { var valid0 = true; } if (valid0) { if (data.P2PDate !== undefined) { let data12 = data.P2PDate; const _errs44 = errors; const _errs45 = errors; if (errors === _errs45) { if (typeof data12 === "string") { if (!pattern0.test(data12)) { validate10.errors = [{ instancePath: instancePath + "/P2PDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/P2PDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs44 === errors; } else { var valid0 = true; } if (valid0) { if (data.Donation !== undefined) { let data13 = data.Donation; const _errs47 = errors; if (!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))) { validate10.errors = [{ instancePath: instancePath + "/Donation", schemaPath: "#/properties/Donation/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs47 === errors; } else { var valid0 = true; } if (valid0) { if (data.Slots !== undefined) { let data14 = data.Slots; const _errs49 = errors; if (!(((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14))) && (isFinite(data14)))) { validate10.errors = [{ instancePath: instancePath + "/Slots", schemaPath: "#/properties/Slots/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs49 === errors; } else { var valid0 = true; } if (valid0) { if (data.Referrer !== undefined) { let data15 = data.Referrer; const _errs51 = errors; if (!(((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15))) && (isFinite(data15)))) { validate10.errors = [{ instancePath: instancePath + "/Referrer", schemaPath: "#/properties/Referrer/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs51 === errors; } else { var valid0 = true; } if (valid0) { if (data.Dollars !== undefined) { let data16 = data.Dollars; const _errs53 = errors; if (!((typeof data16 == "number") && (isFinite(data16)))) { validate10.errors = [{ instancePath: instancePath + "/Dollars", schemaPath: "#/properties/Dollars/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs53 === errors; } else { var valid0 = true; } if (valid0) { if (data.InstallPath !== undefined) { let data17 = data.InstallPath; const _errs55 = errors; const _errs56 = errors; let valid9 = false; let passing4 = null; const _errs57 = errors; if (errors === _errs57) { if (typeof data17 === "string") { if (func3(data17) > 65) { const err15 = { instancePath: instancePath + "/InstallPath", schemaPath: "#/properties/InstallPath/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 65 }, message: "must NOT have more than 65 characters" }; if (vErrors === null) { vErrors = [err15]; } else { vErrors.push(err15); } errors++; } } else { const err16 = { instancePath: instancePath + "/InstallPath", schemaPath: "#/properties/InstallPath/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err16]; } else { vErrors.push(err16); } errors++; } } var _valid4 = _errs57 === errors; if (_valid4) { valid9 = true; passing4 = 0; } const _errs59 = errors; if (data17 !== null) { const err17 = { instancePath: instancePath + "/InstallPath", schemaPath: "#/properties/InstallPath/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err17]; } else { vErrors.push(err17); } errors++; } var _valid4 = _errs59 === errors; if (_valid4 && valid9) { valid9 = false; passing4 = [passing4, 1]; } else { if (_valid4) { valid9 = true; passing4 = 1; } } if (!valid9) { const err18 = { instancePath: instancePath + "/InstallPath", schemaPath: "#/properties/InstallPath/oneOf", keyword: "oneOf", params: { passingSchemas: passing4 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err18]; } else { vErrors.push(err18); } errors++; validate10.errors = vErrors; return false; } else { errors = _errs56; if (vErrors !== null) { if (_errs56) { vErrors.length = _errs56; } else { vErrors = null; } } } var valid0 = _errs55 === errors; } else { var valid0 = true; } if (valid0) { if (data.BoughtRaces !== undefined) { let data18 = data.BoughtRaces; const _errs61 = errors; const _errs62 = errors; let valid10 = false; let passing5 = null; const _errs63 = errors; if (errors === _errs63) { if (typeof data18 === "string") { if (func3(data18) > 65) { const err19 = { instancePath: instancePath + "/BoughtRaces", schemaPath: "#/properties/BoughtRaces/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 65 }, message: "must NOT have more than 65 characters" }; if (vErrors === null) { vErrors = [err19]; } else { vErrors.push(err19); } errors++; } } else { const err20 = { instancePath: instancePath + "/BoughtRaces", schemaPath: "#/properties/BoughtRaces/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err20]; } else { vErrors.push(err20); } errors++; } } var _valid5 = _errs63 === errors; if (_valid5) { valid10 = true; passing5 = 0; } const _errs65 = errors; if (data18 !== null) { const err21 = { instancePath: instancePath + "/BoughtRaces", schemaPath: "#/properties/BoughtRaces/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err21]; } else { vErrors.push(err21); } errors++; } var _valid5 = _errs65 === errors; if (_valid5 && valid10) { valid10 = false; passing5 = [passing5, 1]; } else { if (_valid5) { valid10 = true; passing5 = 1; } } if (!valid10) { const err22 = { instancePath: instancePath + "/BoughtRaces", schemaPath: "#/properties/BoughtRaces/oneOf", keyword: "oneOf", params: { passingSchemas: passing5 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err22]; } else { vErrors.push(err22); } errors++; validate10.errors = vErrors; return false; } else { errors = _errs62; if (vErrors !== null) { if (_errs62) { vErrors.length = _errs62; } else { vErrors = null; } } } var valid0 = _errs61 === errors; } else { var valid0 = true; } if (valid0) { if (data.BoughtProfs !== undefined) { let data19 = data.BoughtProfs; const _errs67 = errors; const _errs68 = errors; let valid11 = false; let passing6 = null; const _errs69 = errors; if (errors === _errs69) { if (typeof data19 === "string") { if (func3(data19) > 65) { const err23 = { instancePath: instancePath + "/BoughtProfs", schemaPath: "#/properties/BoughtProfs/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 65 }, message: "must NOT have more than 65 characters" }; if (vErrors === null) { vErrors = [err23]; } else { vErrors.push(err23); } errors++; } } else { const err24 = { instancePath: instancePath + "/BoughtProfs", schemaPath: "#/properties/BoughtProfs/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err24]; } else { vErrors.push(err24); } errors++; } } var _valid6 = _errs69 === errors; if (_valid6) { valid11 = true; passing6 = 0; } const _errs71 = errors; if (data19 !== null) { const err25 = { instancePath: instancePath + "/BoughtProfs", schemaPath: "#/properties/BoughtProfs/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err25]; } else { vErrors.push(err25); } errors++; } var _valid6 = _errs71 === errors; if (_valid6 && valid11) { valid11 = false; passing6 = [passing6, 1]; } else { if (_valid6) { valid11 = true; passing6 = 1; } } if (!valid11) { const err26 = { instancePath: instancePath + "/BoughtProfs", schemaPath: "#/properties/BoughtProfs/oneOf", keyword: "oneOf", params: { passingSchemas: passing6 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err26]; } else { vErrors.push(err26); } errors++; validate10.errors = vErrors; return false; } else { errors = _errs68; if (vErrors !== null) { if (_errs68) { vErrors.length = _errs68; } else { vErrors = null; } } } var valid0 = _errs67 === errors; } else { var valid0 = true; } if (valid0) { if (data.CanEmail !== undefined) { let data20 = data.CanEmail; const _errs73 = errors; if (!(((typeof data20 == "number") && (!(data20 % 1) && !isNaN(data20))) && (isFinite(data20)))) { validate10.errors = [{ instancePath: instancePath + "/CanEmail", schemaPath: "#/properties/CanEmail/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs73 === errors; } else { var valid0 = true; } if (valid0) { if (data.EmailVerified !== undefined) { let data21 = data.EmailVerified; const _errs75 = errors; if (!(((typeof data21 == "number") && (!(data21 % 1) && !isNaN(data21))) && (isFinite(data21)))) { validate10.errors = [{ instancePath: instancePath + "/EmailVerified", schemaPath: "#/properties/EmailVerified/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs75 === errors; } else { var valid0 = true; } if (valid0) { if (data.EVC !== undefined) { let data22 = data.EVC; const _errs77 = errors; if (errors === _errs77) { if (typeof data22 === "string") { if (func3(data22) > 20) { validate10.errors = [{ instancePath: instancePath + "/EVC", schemaPath: "#/properties/EVC/maxLength", keyword: "maxLength", params: { limit: 20 }, message: "must NOT have more than 20 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/EVC", schemaPath: "#/properties/EVC/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs77 === errors; } else { var valid0 = true; } if (valid0) { if (data.FoundHow !== undefined) { let data23 = data.FoundHow; const _errs79 = errors; if (!(((typeof data23 == "number") && (!(data23 % 1) && !isNaN(data23))) && (isFinite(data23)))) { validate10.errors = [{ instancePath: instancePath + "/FoundHow", schemaPath: "#/properties/FoundHow/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs79 === errors; } else { var valid0 = true; } if (valid0) { if (data.TrialPeriod !== undefined) { let data24 = data.TrialPeriod; const _errs81 = errors; if (!(((typeof data24 == "number") && (!(data24 % 1) && !isNaN(data24))) && (isFinite(data24)))) { validate10.errors = [{ instancePath: instancePath + "/TrialPeriod", schemaPath: "#/properties/TrialPeriod/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs81 === errors; } else { var valid0 = true; } if (valid0) { if (data.EmailStatus !== undefined) { let data25 = data.EmailStatus; const _errs83 = errors; if (!(((typeof data25 == "number") && (!(data25 % 1) && !isNaN(data25))) && (isFinite(data25)))) { validate10.errors = [{ instancePath: instancePath + "/EmailStatus", schemaPath: "#/properties/EmailStatus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs83 === errors; } else { var valid0 = true; } if (valid0) { if (data.PaidAmount !== undefined) { let data26 = data.PaidAmount; const _errs85 = errors; if (!(((typeof data26 == "number") && (!(data26 % 1) && !isNaN(data26))) && (isFinite(data26)))) { validate10.errors = [{ instancePath: instancePath + "/PaidAmount", schemaPath: "#/properties/PaidAmount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs85 === errors; } else { var valid0 = true; } if (valid0) { if (data.Theme !== undefined) { let data27 = data.Theme; const _errs87 = errors; if (errors === _errs87) { if (typeof data27 === "string") { if (func3(data27) > 20) { validate10.errors = [{ instancePath: instancePath + "/Theme", schemaPath: "#/properties/Theme/maxLength", keyword: "maxLength", params: { limit: 20 }, message: "must NOT have more than 20 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/Theme", schemaPath: "#/properties/Theme/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs87 === errors; } else { var valid0 = true; } if (valid0) { if (data.WebPaid !== undefined) { let data28 = data.WebPaid; const _errs89 = errors; if (!(((typeof data28 == "number") && (!(data28 % 1) && !isNaN(data28))) && (isFinite(data28)))) { validate10.errors = [{ instancePath: instancePath + "/WebPaid", schemaPath: "#/properties/WebPaid/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs89 === errors; } else { var valid0 = true; } if (valid0) { if (data.WebMode !== undefined) { let data29 = data.WebMode; const _errs91 = errors; if (!(((typeof data29 == "number") && (!(data29 % 1) && !isNaN(data29))) && (isFinite(data29)))) { validate10.errors = [{ instancePath: instancePath + "/WebMode", schemaPath: "#/properties/WebMode/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs91 === errors; } else { var valid0 = true; } if (valid0) { if (data.AccountPermission !== undefined) { let data30 = data.AccountPermission; const _errs93 = errors; if (!(((typeof data30 == "number") && (!(data30 % 1) && !isNaN(data30))) && (isFinite(data30)))) { validate10.errors = [{ instancePath: instancePath + "/AccountPermission", schemaPath: "#/properties/AccountPermission/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs93 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastPatchInstalled !== undefined) { let data31 = data.LastPatchInstalled; const _errs95 = errors; if (!((typeof data31 == "number") && (isFinite(data31)))) { validate10.errors = [{ instancePath: instancePath + "/LastPatchInstalled", schemaPath: "#/properties/LastPatchInstalled/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs95 === errors; } else { var valid0 = true; } if (valid0) { if (data.CountryCode !== undefined) { let data32 = data.CountryCode; const _errs97 = errors; if (errors === _errs97) { if (typeof data32 === "string") { if (func3(data32) > 2) { validate10.errors = [{ instancePath: instancePath + "/CountryCode", schemaPath: "#/properties/CountryCode/maxLength", keyword: "maxLength", params: { limit: 2 }, message: "must NOT have more than 2 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/CountryCode", schemaPath: "#/properties/CountryCode/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs97 === errors; } else { var valid0 = true; } if (valid0) { if (data.DateofBirth !== undefined) { let data33 = data.DateofBirth; const _errs99 = errors; const _errs100 = errors; if (errors === _errs100) { if (typeof data33 === "string") { if (!pattern0.test(data33)) { validate10.errors = [{ instancePath: instancePath + "/DateofBirth", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/DateofBirth", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs99 === errors; } else { var valid0 = true; } if (valid0) { if (data.ChatIsDisabled !== undefined) { let data34 = data.ChatIsDisabled; const _errs102 = errors; if (!(((typeof data34 == "number") && (!(data34 % 1) && !isNaN(data34))) && (isFinite(data34)))) { validate10.errors = [{ instancePath: instancePath + "/ChatIsDisabled", schemaPath: "#/properties/ChatIsDisabled/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs102 === errors; } else { var valid0 = true; } if (valid0) { if (data.CharactersOnAccount !== undefined) { let data35 = data.CharactersOnAccount; const _errs104 = errors; if (!(((typeof data35 == "number") && (!(data35 % 1) && !isNaN(data35))) && (isFinite(data35)))) { validate10.errors = [{ instancePath: instancePath + "/CharactersOnAccount", schemaPath: "#/properties/CharactersOnAccount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs104 === errors; } else { var valid0 = true; } if (valid0) { if (data.ExpansionPacks !== undefined) { let data36 = data.ExpansionPacks; const _errs106 = errors; if (errors === _errs106) { if (typeof data36 === "string") { if (func3(data36) > 10) { validate10.errors = [{ instancePath: instancePath + "/ExpansionPacks", schemaPath: "#/properties/ExpansionPacks/maxLength", keyword: "maxLength", params: { limit: 10 }, message: "must NOT have more than 10 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/ExpansionPacks", schemaPath: "#/properties/ExpansionPacks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs106 === errors; } else { var valid0 = true; } if (valid0) { if (data.CardLimit !== undefined) { let data37 = data.CardLimit; const _errs108 = errors; if (!(((typeof data37 == "number") && (!(data37 % 1) && !isNaN(data37))) && (isFinite(data37)))) { validate10.errors = [{ instancePath: instancePath + "/CardLimit", schemaPath: "#/properties/CardLimit/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs108 === errors; } else { var valid0 = true; } if (valid0) { if (data.CanEmailAuction !== undefined) { let data38 = data.CanEmailAuction; const _errs110 = errors; if (!(((typeof data38 == "number") && (!(data38 % 1) && !isNaN(data38))) && (isFinite(data38)))) { validate10.errors = [{ instancePath: instancePath + "/CanEmailAuction", schemaPath: "#/properties/CanEmailAuction/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs110 === errors; } else { var valid0 = true; } if (valid0) { if (data.AccountChatOff !== undefined) { let data39 = data.AccountChatOff; const _errs112 = errors; if (!(((typeof data39 == "number") && (!(data39 % 1) && !isNaN(data39))) && (isFinite(data39)))) { validate10.errors = [{ instancePath: instancePath + "/AccountChatOff", schemaPath: "#/properties/AccountChatOff/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs112 === errors; } else { var valid0 = true; } if (valid0) { if (data.FiveCount !== undefined) { let data40 = data.FiveCount; const _errs114 = errors; if (!(((typeof data40 == "number") && (!(data40 % 1) && !isNaN(data40))) && (isFinite(data40)))) { validate10.errors = [{ instancePath: instancePath + "/FiveCount", schemaPath: "#/properties/FiveCount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs114 === errors; } else { var valid0 = true; } if (valid0) { if (data.ReferralPoints !== undefined) { let data41 = data.ReferralPoints; const _errs116 = errors; if (!(((typeof data41 == "number") && (!(data41 % 1) && !isNaN(data41))) && (isFinite(data41)))) { validate10.errors = [{ instancePath: instancePath + "/ReferralPoints", schemaPath: "#/properties/ReferralPoints/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs116 === errors; } else { var valid0 = true; } if (valid0) { if (data.ReferralGoldPoints !== undefined) { let data42 = data.ReferralGoldPoints; const _errs118 = errors; if (!(((typeof data42 == "number") && (!(data42 % 1) && !isNaN(data42))) && (isFinite(data42)))) { validate10.errors = [{ instancePath: instancePath + "/ReferralGoldPoints", schemaPath: "#/properties/ReferralGoldPoints/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs118 === errors; } else { var valid0 = true; } if (valid0) { if (data.MainStyle !== undefined) { let data43 = data.MainStyle; const _errs120 = errors; if (!(((typeof data43 == "number") && (!(data43 % 1) && !isNaN(data43))) && (isFinite(data43)))) { validate10.errors = [{ instancePath: instancePath + "/MainStyle", schemaPath: "#/properties/MainStyle/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs120 === errors; } else { var valid0 = true; } if (valid0) { if (data.AccountCredits !== undefined) { let data44 = data.AccountCredits; const _errs122 = errors; if (!(((typeof data44 == "number") && (!(data44 % 1) && !isNaN(data44))) && (isFinite(data44)))) { validate10.errors = [{ instancePath: instancePath + "/AccountCredits", schemaPath: "#/properties/AccountCredits/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs122 === errors; } else { var valid0 = true; } if (valid0) { if (data.NewspaperPoints !== undefined) { let data45 = data.NewspaperPoints; const _errs124 = errors; if (!(((typeof data45 == "number") && (!(data45 % 1) && !isNaN(data45))) && (isFinite(data45)))) { validate10.errors = [{ instancePath: instancePath + "/NewspaperPoints", schemaPath: "#/properties/NewspaperPoints/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs124 === errors; } else { var valid0 = true; } if (valid0) { if (data.TotalNewspaperPoints !== undefined) { let data46 = data.TotalNewspaperPoints; const _errs126 = errors; if (!(((typeof data46 == "number") && (!(data46 % 1) && !isNaN(data46))) && (isFinite(data46)))) { validate10.errors = [{ instancePath: instancePath + "/TotalNewspaperPoints", schemaPath: "#/properties/TotalNewspaperPoints/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs126 === errors; } else { var valid0 = true; } if (valid0) { if (data.WindowDetails !== undefined) { let data47 = data.WindowDetails; const _errs128 = errors; if (errors === _errs128) { if (typeof data47 === "string") { if (func3(data47) > 1000) { validate10.errors = [{ instancePath: instancePath + "/WindowDetails", schemaPath: "#/properties/WindowDetails/maxLength", keyword: "maxLength", params: { limit: 1000 }, message: "must NOT have more than 1000 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/WindowDetails", schemaPath: "#/properties/WindowDetails/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs128 === errors; } else { var valid0 = true; } if (valid0) { if (data.MiniCredits !== undefined) { let data48 = data.MiniCredits; const _errs130 = errors; if (!(((typeof data48 == "number") && (!(data48 % 1) && !isNaN(data48))) && (isFinite(data48)))) { validate10.errors = [{ instancePath: instancePath + "/MiniCredits", schemaPath: "#/properties/MiniCredits/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs130 === errors; } else { var valid0 = true; } if (valid0) { if (data.OldPassword !== undefined) { let data49 = data.OldPassword; const _errs132 = errors; if (errors === _errs132) { if (typeof data49 === "string") { if (func3(data49) > 20) { validate10.errors = [{ instancePath: instancePath + "/OldPassword", schemaPath: "#/properties/OldPassword/maxLength", keyword: "maxLength", params: { limit: 20 }, message: "must NOT have more than 20 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/OldPassword", schemaPath: "#/properties/OldPassword/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs132 === errors; } else { var valid0 = true; } if (valid0) { if (data.OldPasswordReset !== undefined) { let data50 = data.OldPasswordReset; const _errs134 = errors; if (!(((typeof data50 == "number") && (!(data50 % 1) && !isNaN(data50))) && (isFinite(data50)))) { validate10.errors = [{ instancePath: instancePath + "/OldPasswordReset", schemaPath: "#/properties/OldPasswordReset/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs134 === errors; } else { var valid0 = true; } if (valid0) { if (data.AccountPassword !== undefined) { let data51 = data.AccountPassword; const _errs136 = errors; if (errors === _errs136) { if (typeof data51 === "string") { if (func3(data51) > 50) { validate10.errors = [{ instancePath: instancePath + "/AccountPassword", schemaPath: "#/properties/AccountPassword/maxLength", keyword: "maxLength", params: { limit: 50 }, message: "must NOT have more than 50 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/AccountPassword", schemaPath: "#/properties/AccountPassword/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs136 === errors; } else { var valid0 = true; } if (valid0) { if (data.Reward !== undefined) { let data52 = data.Reward; const _errs138 = errors; if (!(((typeof data52 == "number") && (!(data52 % 1) && !isNaN(data52))) && (isFinite(data52)))) { validate10.errors = [{ instancePath: instancePath + "/Reward", schemaPath: "#/properties/Reward/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs138 === errors; } else { var valid0 = true; } if (valid0) { if (data.FacebookID !== undefined) { let data53 = data.FacebookID; const _errs140 = errors; if (errors === _errs140) { if (typeof data53 === "string") { if (func3(data53) > 50) { validate10.errors = [{ instancePath: instancePath + "/FacebookID", schemaPath: "#/properties/FacebookID/maxLength", keyword: "maxLength", params: { limit: 50 }, message: "must NOT have more than 50 characters" }]; return false; } } else { validate10.errors = [{ instancePath: instancePath + "/FacebookID", schemaPath: "#/properties/FacebookID/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs140 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } else { validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate10.errors = vErrors; return errors === 0; } export const validateBuildingList = validate11; const schema17 = { "$id": "https://data.landsofhope.com/schemas/v0/buildings/building-list.json", "title": "BuildingList", "type": "array", "items": { "$ref": "/schemas/v0/buildings/building.json" } }; const schema18 = { "$id": "https://data.landsofhope.com/schemas/v0/buildings/building.json", "type": "object", "additionalProperties": false, "properties": { "$type": { "const": "/v0/buildings/building" }, "buildingId": { "type": "integer" }, "buildingParentId": { "type": ["integer", "null"] }, "buildingName": { "type": "string" }, "img": { "type": ["string", "null"] }, "img1": { "type": ["string", "null"] }, "img2": { "type": ["string", "null"] }, "characterId": { "type": "integer" }, "buildingTypeId": { "type": "integer" }, "mapX": { "type": "integer" }, "mapY": { "type": "integer" }, "mapZ": { "type": "integer" }, "gameId": { "type": "integer" }, "server": { "type": "integer" }, "offsetX": { "type": "integer" }, "offsetY": { "type": "integer" }, "description": { "type": ["string", "null"] }, "roomId": { "type": ["integer", "null"] }, "npc": { "type": "integer" }, "locked": { "type": "integer" }, "visible": { "type": "integer" }, "playerBuilt": { "type": "integer" }, "completed": { "type": "integer" }, "pickable": { "type": ["integer", "null"] }, "dungeon": { "type": "integer" }, "name": { "type": ["string", "null"] }, "spawns": { "type": "integer" }, "respawnMins": { "type": "integer" }, "raceId": { "type": "integer" }, "professionId": { "type": ["integer", "null"] }, "level": { "type": "integer" }, "gotoBuildingId": { "type": "integer" }, "boss": { "type": "integer" }, "lastUsed": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "buildingDisappears": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "flying": { "type": "integer" }, "underwater": { "type": "integer" }, "hidden": { "type": "integer" }, "specialFlag": { "type": "integer" }, "useBuildingLoot": { "type": "integer" }, "buildingPrice": { "type": "number" }, "discoveredBy": { "type": "integer" }, "discoveredSkill": { "type": "integer" }, "discoveredDate": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "spawnAllegiance": { "type": "integer" }, "monster": { "type": "boolean" }, "npcCount": { "type": "integer" }, "allegiance": { "type": "integer" }, "noMove": { "type": "boolean" }, "noMark": { "type": "boolean" }, "buildingLevel": { "type": "integer" }, "lightSource": { "type": "boolean" }, "originalAllegiance": { "type": "integer" }, "siegeDate": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "noSiege": { "type": "boolean" }, "pImg": { "type": ["string", "null"] }, "decayed": { "type": "integer" }, "guildId": { "type": "integer" }, "soundEffect": { "type": ["string", "null"] }, "forSale": { "type": "boolean" }, "newColor": { "type": "integer" }, "music": { "type": ["string", "null"] }, "detectedBy": { "type": "integer" }, "detectedDate": { "$ref": "/schemas/v0/datetime.json" }, "detectedSkill": { "type": "integer" }, "buildingOrder": { "type": "integer" }, "challengeType": { "type": "integer" }, "challengeId": { "type": "integer" }, "spawnSex": { "type": "string" }, "spawnPicture": { "type": "string" }, "ownerAccountId": { "type": "integer" }, "buildingTag": { "type": "string" }, "noDelete": { "type": "boolean" }, "needPaid": { "type": "boolean" }, "autoSpellId": { "type": "integer" }, "lastSpellCast": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "bLootItemName": { "type": ["string", "null"] }, "bLootItemPicture": { "type": ["string", "null"] }, "allowIndex": { "type": "integer" }, "lordshipRating": { "type": "integer" }, "peasants": { "type": "integer" }, "happiness": { "type": "integer" }, "dirty": { "$ref": "/schemas/v0/datetime.json" } }, "required": ["$type", "buildingId", "buildingParentId", "buildingName", "img", "img1", "img2", "characterId", "buildingTypeId", "mapX", "mapY", "mapZ", "gameId", "server", "offsetX", "offsetY", "description", "roomId", "npc", "locked", "visible", "playerBuilt", "completed", "pickable", "dungeon", "name", "spawns", "respawnMins", "raceId", "professionId", "level", "gotoBuildingId", "boss", "lastUsed", "buildingDisappears", "flying", "underwater", "hidden", "specialFlag", "useBuildingLoot", "buildingPrice", "discoveredBy", "discoveredSkill", "discoveredDate", "spawnAllegiance", "monster", "npcCount", "allegiance", "noMove", "noMark", "buildingLevel", "lightSource", "originalAllegiance", "siegeDate", "noSiege", "pImg", "decayed", "guildId", "soundEffect", "forSale", "newColor", "music", "detectedBy", "detectedDate", "detectedSkill", "buildingOrder", "challengeType", "challengeId", "spawnSex", "spawnPicture", "ownerAccountId", "buildingTag", "noDelete", "needPaid", "autoSpellId", "lastSpellCast", "bLootItemName", "bLootItemPicture", "allowIndex", "lordshipRating", "peasants", "happiness", "dirty"], "title": "Building" }; function validate12(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data.$type === undefined) && (missing0 = "$type")) || ((data.buildingId === undefined) && (missing0 = "buildingId"))) || ((data.buildingParentId === undefined) && (missing0 = "buildingParentId"))) || ((data.buildingName === undefined) && (missing0 = "buildingName"))) || ((data.img === undefined) && (missing0 = "img"))) || ((data.img1 === undefined) && (missing0 = "img1"))) || ((data.img2 === undefined) && (missing0 = "img2"))) || ((data.characterId === undefined) && (missing0 = "characterId"))) || ((data.buildingTypeId === undefined) && (missing0 = "buildingTypeId"))) || ((data.mapX === undefined) && (missing0 = "mapX"))) || ((data.mapY === undefined) && (missing0 = "mapY"))) || ((data.mapZ === undefined) && (missing0 = "mapZ"))) || ((data.gameId === undefined) && (missing0 = "gameId"))) || ((data.server === undefined) && (missing0 = "server"))) || ((data.offsetX === undefined) && (missing0 = "offsetX"))) || ((data.offsetY === undefined) && (missing0 = "offsetY"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.roomId === undefined) && (missing0 = "roomId"))) || ((data.npc === undefined) && (missing0 = "npc"))) || ((data.locked === undefined) && (missing0 = "locked"))) || ((data.visible === undefined) && (missing0 = "visible"))) || ((data.playerBuilt === undefined) && (missing0 = "playerBuilt"))) || ((data.completed === undefined) && (missing0 = "completed"))) || ((data.pickable === undefined) && (missing0 = "pickable"))) || ((data.dungeon === undefined) && (missing0 = "dungeon"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.spawns === undefined) && (missing0 = "spawns"))) || ((data.respawnMins === undefined) && (missing0 = "respawnMins"))) || ((data.raceId === undefined) && (missing0 = "raceId"))) || ((data.professionId === undefined) && (missing0 = "professionId"))) || ((data.level === undefined) && (missing0 = "level"))) || ((data.gotoBuildingId === undefined) && (missing0 = "gotoBuildingId"))) || ((data.boss === undefined) && (missing0 = "boss"))) || ((data.lastUsed === undefined) && (missing0 = "lastUsed"))) || ((data.buildingDisappears === undefined) && (missing0 = "buildingDisappears"))) || ((data.flying === undefined) && (missing0 = "flying"))) || ((data.underwater === undefined) && (missing0 = "underwater"))) || ((data.hidden === undefined) && (missing0 = "hidden"))) || ((data.specialFlag === undefined) && (missing0 = "specialFlag"))) || ((data.useBuildingLoot === undefined) && (missing0 = "useBuildingLoot"))) || ((data.buildingPrice === undefined) && (missing0 = "buildingPrice"))) || ((data.discoveredBy === undefined) && (missing0 = "discoveredBy"))) || ((data.discoveredSkill === undefined) && (missing0 = "discoveredSkill"))) || ((data.discoveredDate === undefined) && (missing0 = "discoveredDate"))) || ((data.spawnAllegiance === undefined) && (missing0 = "spawnAllegiance"))) || ((data.monster === undefined) && (missing0 = "monster"))) || ((data.npcCount === undefined) && (missing0 = "npcCount"))) || ((data.allegiance === undefined) && (missing0 = "allegiance"))) || ((data.noMove === undefined) && (missing0 = "noMove"))) || ((data.noMark === undefined) && (missing0 = "noMark"))) || ((data.buildingLevel === undefined) && (missing0 = "buildingLevel"))) || ((data.lightSource === undefined) && (missing0 = "lightSource"))) || ((data.originalAllegiance === undefined) && (missing0 = "originalAllegiance"))) || ((data.siegeDate === undefined) && (missing0 = "siegeDate"))) || ((data.noSiege === undefined) && (missing0 = "noSiege"))) || ((data.pImg === undefined) && (missing0 = "pImg"))) || ((data.decayed === undefined) && (missing0 = "decayed"))) || ((data.guildId === undefined) && (missing0 = "guildId"))) || ((data.soundEffect === undefined) && (missing0 = "soundEffect"))) || ((data.forSale === undefined) && (missing0 = "forSale"))) || ((data.newColor === undefined) && (missing0 = "newColor"))) || ((data.music === undefined) && (missing0 = "music"))) || ((data.detectedBy === undefined) && (missing0 = "detectedBy"))) || ((data.detectedDate === undefined) && (missing0 = "detectedDate"))) || ((data.detectedSkill === undefined) && (missing0 = "detectedSkill"))) || ((data.buildingOrder === undefined) && (missing0 = "buildingOrder"))) || ((data.challengeType === undefined) && (missing0 = "challengeType"))) || ((data.challengeId === undefined) && (missing0 = "challengeId"))) || ((data.spawnSex === undefined) && (missing0 = "spawnSex"))) || ((data.spawnPicture === undefined) && (missing0 = "spawnPicture"))) || ((data.ownerAccountId === undefined) && (missing0 = "ownerAccountId"))) || ((data.buildingTag === undefined) && (missing0 = "buildingTag"))) || ((data.noDelete === undefined) && (missing0 = "noDelete"))) || ((data.needPaid === undefined) && (missing0 = "needPaid"))) || ((data.autoSpellId === undefined) && (missing0 = "autoSpellId"))) || ((data.lastSpellCast === undefined) && (missing0 = "lastSpellCast"))) || ((data.bLootItemName === undefined) && (missing0 = "bLootItemName"))) || ((data.bLootItemPicture === undefined) && (missing0 = "bLootItemPicture"))) || ((data.allowIndex === undefined) && (missing0 = "allowIndex"))) || ((data.lordshipRating === undefined) && (missing0 = "lordshipRating"))) || ((data.peasants === undefined) && (missing0 = "peasants"))) || ((data.happiness === undefined) && (missing0 = "happiness"))) || ((data.dirty === undefined) && (missing0 = "dirty"))) { validate12.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func2.call(schema18.properties, key0))) { validate12.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.$type !== undefined) { const _errs2 = errors; if ("/v0/buildings/building" !== data.$type) { validate12.errors = [{ instancePath: instancePath + "/$type", schemaPath: "#/properties/%24type/const", keyword: "const", params: { allowedValue: "/v0/buildings/building" }, message: "must be equal to constant" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingId !== undefined) { let data1 = data.buildingId; const _errs3 = errors; if (!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))) { validate12.errors = [{ instancePath: instancePath + "/buildingId", schemaPath: "#/properties/buildingId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs3 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingParentId !== undefined) { let data2 = data.buildingParentId; const _errs5 = errors; if ((!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))) && (data2 !== null)) { validate12.errors = [{ instancePath: instancePath + "/buildingParentId", schemaPath: "#/properties/buildingParentId/type", keyword: "type", params: { type: schema18.properties.buildingParentId.type }, message: "must be integer,null" }]; return false; } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingName !== undefined) { const _errs7 = errors; if (typeof data.buildingName !== "string") { validate12.errors = [{ instancePath: instancePath + "/buildingName", schemaPath: "#/properties/buildingName/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.img !== undefined) { let data4 = data.img; const _errs9 = errors; if ((typeof data4 !== "string") && (data4 !== null)) { validate12.errors = [{ instancePath: instancePath + "/img", schemaPath: "#/properties/img/type", keyword: "type", params: { type: schema18.properties.img.type }, message: "must be string,null" }]; return false; } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.img1 !== undefined) { let data5 = data.img1; const _errs11 = errors; if ((typeof data5 !== "string") && (data5 !== null)) { validate12.errors = [{ instancePath: instancePath + "/img1", schemaPath: "#/properties/img1/type", keyword: "type", params: { type: schema18.properties.img1.type }, message: "must be string,null" }]; return false; } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.img2 !== undefined) { let data6 = data.img2; const _errs13 = errors; if ((typeof data6 !== "string") && (data6 !== null)) { validate12.errors = [{ instancePath: instancePath + "/img2", schemaPath: "#/properties/img2/type", keyword: "type", params: { type: schema18.properties.img2.type }, message: "must be string,null" }]; return false; } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.characterId !== undefined) { let data7 = data.characterId; const _errs15 = errors; if (!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))) { validate12.errors = [{ instancePath: instancePath + "/characterId", schemaPath: "#/properties/characterId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingTypeId !== undefined) { let data8 = data.buildingTypeId; const _errs17 = errors; if (!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))) { validate12.errors = [{ instancePath: instancePath + "/buildingTypeId", schemaPath: "#/properties/buildingTypeId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs17 === errors; } else { var valid0 = true; } if (valid0) { if (data.mapX !== undefined) { let data9 = data.mapX; const _errs19 = errors; if (!(((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9))) && (isFinite(data9)))) { validate12.errors = [{ instancePath: instancePath + "/mapX", schemaPath: "#/properties/mapX/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs19 === errors; } else { var valid0 = true; } if (valid0) { if (data.mapY !== undefined) { let data10 = data.mapY; const _errs21 = errors; if (!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))) { validate12.errors = [{ instancePath: instancePath + "/mapY", schemaPath: "#/properties/mapY/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.mapZ !== undefined) { let data11 = data.mapZ; const _errs23 = errors; if (!(((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11))) && (isFinite(data11)))) { validate12.errors = [{ instancePath: instancePath + "/mapZ", schemaPath: "#/properties/mapZ/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.gameId !== undefined) { let data12 = data.gameId; const _errs25 = errors; if (!(((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12))) && (isFinite(data12)))) { validate12.errors = [{ instancePath: instancePath + "/gameId", schemaPath: "#/properties/gameId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.server !== undefined) { let data13 = data.server; const _errs27 = errors; if (!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))) { validate12.errors = [{ instancePath: instancePath + "/server", schemaPath: "#/properties/server/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.offsetX !== undefined) { let data14 = data.offsetX; const _errs29 = errors; if (!(((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14))) && (isFinite(data14)))) { validate12.errors = [{ instancePath: instancePath + "/offsetX", schemaPath: "#/properties/offsetX/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.offsetY !== undefined) { let data15 = data.offsetY; const _errs31 = errors; if (!(((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15))) && (isFinite(data15)))) { validate12.errors = [{ instancePath: instancePath + "/offsetY", schemaPath: "#/properties/offsetY/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs31 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { let data16 = data.description; const _errs33 = errors; if ((typeof data16 !== "string") && (data16 !== null)) { validate12.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: schema18.properties.description.type }, message: "must be string,null" }]; return false; } var valid0 = _errs33 === errors; } else { var valid0 = true; } if (valid0) { if (data.roomId !== undefined) { let data17 = data.roomId; const _errs35 = errors; if ((!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))) && (data17 !== null)) { validate12.errors = [{ instancePath: instancePath + "/roomId", schemaPath: "#/properties/roomId/type", keyword: "type", params: { type: schema18.properties.roomId.type }, message: "must be integer,null" }]; return false; } var valid0 = _errs35 === errors; } else { var valid0 = true; } if (valid0) { if (data.npc !== undefined) { let data18 = data.npc; const _errs37 = errors; if (!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))) { validate12.errors = [{ instancePath: instancePath + "/npc", schemaPath: "#/properties/npc/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs37 === errors; } else { var valid0 = true; } if (valid0) { if (data.locked !== undefined) { let data19 = data.locked; const _errs39 = errors; if (!(((typeof data19 == "number") && (!(data19 % 1) && !isNaN(data19))) && (isFinite(data19)))) { validate12.errors = [{ instancePath: instancePath + "/locked", schemaPath: "#/properties/locked/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs39 === errors; } else { var valid0 = true; } if (valid0) { if (data.visible !== undefined) { let data20 = data.visible; const _errs41 = errors; if (!(((typeof data20 == "number") && (!(data20 % 1) && !isNaN(data20))) && (isFinite(data20)))) { validate12.errors = [{ instancePath: instancePath + "/visible", schemaPath: "#/properties/visible/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs41 === errors; } else { var valid0 = true; } if (valid0) { if (data.playerBuilt !== undefined) { let data21 = data.playerBuilt; const _errs43 = errors; if (!(((typeof data21 == "number") && (!(data21 % 1) && !isNaN(data21))) && (isFinite(data21)))) { validate12.errors = [{ instancePath: instancePath + "/playerBuilt", schemaPath: "#/properties/playerBuilt/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs43 === errors; } else { var valid0 = true; } if (valid0) { if (data.completed !== undefined) { let data22 = data.completed; const _errs45 = errors; if (!(((typeof data22 == "number") && (!(data22 % 1) && !isNaN(data22))) && (isFinite(data22)))) { validate12.errors = [{ instancePath: instancePath + "/completed", schemaPath: "#/properties/completed/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs45 === errors; } else { var valid0 = true; } if (valid0) { if (data.pickable !== undefined) { let data23 = data.pickable; const _errs47 = errors; if ((!(((typeof data23 == "number") && (!(data23 % 1) && !isNaN(data23))) && (isFinite(data23)))) && (data23 !== null)) { validate12.errors = [{ instancePath: instancePath + "/pickable", schemaPath: "#/properties/pickable/type", keyword: "type", params: { type: schema18.properties.pickable.type }, message: "must be integer,null" }]; return false; } var valid0 = _errs47 === errors; } else { var valid0 = true; } if (valid0) { if (data.dungeon !== undefined) { let data24 = data.dungeon; const _errs49 = errors; if (!(((typeof data24 == "number") && (!(data24 % 1) && !isNaN(data24))) && (isFinite(data24)))) { validate12.errors = [{ instancePath: instancePath + "/dungeon", schemaPath: "#/properties/dungeon/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs49 === errors; } else { var valid0 = true; } if (valid0) { if (data.name !== undefined) { let data25 = data.name; const _errs51 = errors; if ((typeof data25 !== "string") && (data25 !== null)) { validate12.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: schema18.properties.name.type }, message: "must be string,null" }]; return false; } var valid0 = _errs51 === errors; } else { var valid0 = true; } if (valid0) { if (data.spawns !== undefined) { let data26 = data.spawns; const _errs53 = errors; if (!(((typeof data26 == "number") && (!(data26 % 1) && !isNaN(data26))) && (isFinite(data26)))) { validate12.errors = [{ instancePath: instancePath + "/spawns", schemaPath: "#/properties/spawns/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs53 === errors; } else { var valid0 = true; } if (valid0) { if (data.respawnMins !== undefined) { let data27 = data.respawnMins; const _errs55 = errors; if (!(((typeof data27 == "number") && (!(data27 % 1) && !isNaN(data27))) && (isFinite(data27)))) { validate12.errors = [{ instancePath: instancePath + "/respawnMins", schemaPath: "#/properties/respawnMins/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs55 === errors; } else { var valid0 = true; } if (valid0) { if (data.raceId !== undefined) { let data28 = data.raceId; const _errs57 = errors; if (!(((typeof data28 == "number") && (!(data28 % 1) && !isNaN(data28))) && (isFinite(data28)))) { validate12.errors = [{ instancePath: instancePath + "/raceId", schemaPath: "#/properties/raceId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs57 === errors; } else { var valid0 = true; } if (valid0) { if (data.professionId !== undefined) { let data29 = data.professionId; const _errs59 = errors; if ((!(((typeof data29 == "number") && (!(data29 % 1) && !isNaN(data29))) && (isFinite(data29)))) && (data29 !== null)) { validate12.errors = [{ instancePath: instancePath + "/professionId", schemaPath: "#/properties/professionId/type", keyword: "type", params: { type: schema18.properties.professionId.type }, message: "must be integer,null" }]; return false; } var valid0 = _errs59 === errors; } else { var valid0 = true; } if (valid0) { if (data.level !== undefined) { let data30 = data.level; const _errs61 = errors; if (!(((typeof data30 == "number") && (!(data30 % 1) && !isNaN(data30))) && (isFinite(data30)))) { validate12.errors = [{ instancePath: instancePath + "/level", schemaPath: "#/properties/level/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs61 === errors; } else { var valid0 = true; } if (valid0) { if (data.gotoBuildingId !== undefined) { let data31 = data.gotoBuildingId; const _errs63 = errors; if (!(((typeof data31 == "number") && (!(data31 % 1) && !isNaN(data31))) && (isFinite(data31)))) { validate12.errors = [{ instancePath: instancePath + "/gotoBuildingId", schemaPath: "#/properties/gotoBuildingId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs63 === errors; } else { var valid0 = true; } if (valid0) { if (data.boss !== undefined) { let data32 = data.boss; const _errs65 = errors; if (!(((typeof data32 == "number") && (!(data32 % 1) && !isNaN(data32))) && (isFinite(data32)))) { validate12.errors = [{ instancePath: instancePath + "/boss", schemaPath: "#/properties/boss/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs65 === errors; } else { var valid0 = true; } if (valid0) { if (data.lastUsed !== undefined) { let data33 = data.lastUsed; const _errs67 = errors; const _errs68 = errors; let valid1 = false; let passing0 = null; const _errs69 = errors; const _errs70 = errors; if (errors === _errs70) { if (typeof data33 === "string") { if (!pattern0.test(data33)) { const err0 = { instancePath: instancePath + "/lastUsed", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err0]; } else { vErrors.push(err0); } errors++; } } else { const err1 = { instancePath: instancePath + "/lastUsed", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err1]; } else { vErrors.push(err1); } errors++; } } var _valid0 = _errs69 === errors; if (_valid0) { valid1 = true; passing0 = 0; } const _errs72 = errors; if (data33 !== null) { const err2 = { instancePath: instancePath + "/lastUsed", schemaPath: "#/properties/lastUsed/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err2]; } else { vErrors.push(err2); } errors++; } var _valid0 = _errs72 === errors; if (_valid0 && valid1) { valid1 = false; passing0 = [passing0, 1]; } else { if (_valid0) { valid1 = true; passing0 = 1; } } if (!valid1) { const err3 = { instancePath: instancePath + "/lastUsed", schemaPath: "#/properties/lastUsed/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err3]; } else { vErrors.push(err3); } errors++; validate12.errors = vErrors; return false; } else { errors = _errs68; if (vErrors !== null) { if (_errs68) { vErrors.length = _errs68; } else { vErrors = null; } } } var valid0 = _errs67 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingDisappears !== undefined) { let data34 = data.buildingDisappears; const _errs74 = errors; const _errs75 = errors; let valid3 = false; let passing1 = null; const _errs76 = errors; const _errs77 = errors; if (errors === _errs77) { if (typeof data34 === "string") { if (!pattern0.test(data34)) { const err4 = { instancePath: instancePath + "/buildingDisappears", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err4]; } else { vErrors.push(err4); } errors++; } } else { const err5 = { instancePath: instancePath + "/buildingDisappears", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err5]; } else { vErrors.push(err5); } errors++; } } var _valid1 = _errs76 === errors; if (_valid1) { valid3 = true; passing1 = 0; } const _errs79 = errors; if (data34 !== null) { const err6 = { instancePath: instancePath + "/buildingDisappears", schemaPath: "#/properties/buildingDisappears/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err6]; } else { vErrors.push(err6); } errors++; } var _valid1 = _errs79 === errors; if (_valid1 && valid3) { valid3 = false; passing1 = [passing1, 1]; } else { if (_valid1) { valid3 = true; passing1 = 1; } } if (!valid3) { const err7 = { instancePath: instancePath + "/buildingDisappears", schemaPath: "#/properties/buildingDisappears/oneOf", keyword: "oneOf", params: { passingSchemas: passing1 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err7]; } else { vErrors.push(err7); } errors++; validate12.errors = vErrors; return false; } else { errors = _errs75; if (vErrors !== null) { if (_errs75) { vErrors.length = _errs75; } else { vErrors = null; } } } var valid0 = _errs74 === errors; } else { var valid0 = true; } if (valid0) { if (data.flying !== undefined) { let data35 = data.flying; const _errs81 = errors; if (!(((typeof data35 == "number") && (!(data35 % 1) && !isNaN(data35))) && (isFinite(data35)))) { validate12.errors = [{ instancePath: instancePath + "/flying", schemaPath: "#/properties/flying/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs81 === errors; } else { var valid0 = true; } if (valid0) { if (data.underwater !== undefined) { let data36 = data.underwater; const _errs83 = errors; if (!(((typeof data36 == "number") && (!(data36 % 1) && !isNaN(data36))) && (isFinite(data36)))) { validate12.errors = [{ instancePath: instancePath + "/underwater", schemaPath: "#/properties/underwater/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs83 === errors; } else { var valid0 = true; } if (valid0) { if (data.hidden !== undefined) { let data37 = data.hidden; const _errs85 = errors; if (!(((typeof data37 == "number") && (!(data37 % 1) && !isNaN(data37))) && (isFinite(data37)))) { validate12.errors = [{ instancePath: instancePath + "/hidden", schemaPath: "#/properties/hidden/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs85 === errors; } else { var valid0 = true; } if (valid0) { if (data.specialFlag !== undefined) { let data38 = data.specialFlag; const _errs87 = errors; if (!(((typeof data38 == "number") && (!(data38 % 1) && !isNaN(data38))) && (isFinite(data38)))) { validate12.errors = [{ instancePath: instancePath + "/specialFlag", schemaPath: "#/properties/specialFlag/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs87 === errors; } else { var valid0 = true; } if (valid0) { if (data.useBuildingLoot !== undefined) { let data39 = data.useBuildingLoot; const _errs89 = errors; if (!(((typeof data39 == "number") && (!(data39 % 1) && !isNaN(data39))) && (isFinite(data39)))) { validate12.errors = [{ instancePath: instancePath + "/useBuildingLoot", schemaPath: "#/properties/useBuildingLoot/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs89 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingPrice !== undefined) { let data40 = data.buildingPrice; const _errs91 = errors; if (!((typeof data40 == "number") && (isFinite(data40)))) { validate12.errors = [{ instancePath: instancePath + "/buildingPrice", schemaPath: "#/properties/buildingPrice/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs91 === errors; } else { var valid0 = true; } if (valid0) { if (data.discoveredBy !== undefined) { let data41 = data.discoveredBy; const _errs93 = errors; if (!(((typeof data41 == "number") && (!(data41 % 1) && !isNaN(data41))) && (isFinite(data41)))) { validate12.errors = [{ instancePath: instancePath + "/discoveredBy", schemaPath: "#/properties/discoveredBy/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs93 === errors; } else { var valid0 = true; } if (valid0) { if (data.discoveredSkill !== undefined) { let data42 = data.discoveredSkill; const _errs95 = errors; if (!(((typeof data42 == "number") && (!(data42 % 1) && !isNaN(data42))) && (isFinite(data42)))) { validate12.errors = [{ instancePath: instancePath + "/discoveredSkill", schemaPath: "#/properties/discoveredSkill/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs95 === errors; } else { var valid0 = true; } if (valid0) { if (data.discoveredDate !== undefined) { let data43 = data.discoveredDate; const _errs97 = errors; const _errs98 = errors; let valid5 = false; let passing2 = null; const _errs99 = errors; const _errs100 = errors; if (errors === _errs100) { if (typeof data43 === "string") { if (!pattern0.test(data43)) { const err8 = { instancePath: instancePath + "/discoveredDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err8]; } else { vErrors.push(err8); } errors++; } } else { const err9 = { instancePath: instancePath + "/discoveredDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err9]; } else { vErrors.push(err9); } errors++; } } var _valid2 = _errs99 === errors; if (_valid2) { valid5 = true; passing2 = 0; } const _errs102 = errors; if (data43 !== null) { const err10 = { instancePath: instancePath + "/discoveredDate", schemaPath: "#/properties/discoveredDate/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err10]; } else { vErrors.push(err10); } errors++; } var _valid2 = _errs102 === errors; if (_valid2 && valid5) { valid5 = false; passing2 = [passing2, 1]; } else { if (_valid2) { valid5 = true; passing2 = 1; } } if (!valid5) { const err11 = { instancePath: instancePath + "/discoveredDate", schemaPath: "#/properties/discoveredDate/oneOf", keyword: "oneOf", params: { passingSchemas: passing2 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err11]; } else { vErrors.push(err11); } errors++; validate12.errors = vErrors; return false; } else { errors = _errs98; if (vErrors !== null) { if (_errs98) { vErrors.length = _errs98; } else { vErrors = null; } } } var valid0 = _errs97 === errors; } else { var valid0 = true; } if (valid0) { if (data.spawnAllegiance !== undefined) { let data44 = data.spawnAllegiance; const _errs104 = errors; if (!(((typeof data44 == "number") && (!(data44 % 1) && !isNaN(data44))) && (isFinite(data44)))) { validate12.errors = [{ instancePath: instancePath + "/spawnAllegiance", schemaPath: "#/properties/spawnAllegiance/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs104 === errors; } else { var valid0 = true; } if (valid0) { if (data.monster !== undefined) { const _errs106 = errors; if (typeof data.monster !== "boolean") { validate12.errors = [{ instancePath: instancePath + "/monster", schemaPath: "#/properties/monster/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs106 === errors; } else { var valid0 = true; } if (valid0) { if (data.npcCount !== undefined) { let data46 = data.npcCount; const _errs108 = errors; if (!(((typeof data46 == "number") && (!(data46 % 1) && !isNaN(data46))) && (isFinite(data46)))) { validate12.errors = [{ instancePath: instancePath + "/npcCount", schemaPath: "#/properties/npcCount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs108 === errors; } else { var valid0 = true; } if (valid0) { if (data.allegiance !== undefined) { let data47 = data.allegiance; const _errs110 = errors; if (!(((typeof data47 == "number") && (!(data47 % 1) && !isNaN(data47))) && (isFinite(data47)))) { validate12.errors = [{ instancePath: instancePath + "/allegiance", schemaPath: "#/properties/allegiance/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs110 === errors; } else { var valid0 = true; } if (valid0) { if (data.noMove !== undefined) { const _errs112 = errors; if (typeof data.noMove !== "boolean") { validate12.errors = [{ instancePath: instancePath + "/noMove", schemaPath: "#/properties/noMove/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs112 === errors; } else { var valid0 = true; } if (valid0) { if (data.noMark !== undefined) { const _errs114 = errors; if (typeof data.noMark !== "boolean") { validate12.errors = [{ instancePath: instancePath + "/noMark", schemaPath: "#/properties/noMark/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs114 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingLevel !== undefined) { let data50 = data.buildingLevel; const _errs116 = errors; if (!(((typeof data50 == "number") && (!(data50 % 1) && !isNaN(data50))) && (isFinite(data50)))) { validate12.errors = [{ instancePath: instancePath + "/buildingLevel", schemaPath: "#/properties/buildingLevel/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs116 === errors; } else { var valid0 = true; } if (valid0) { if (data.lightSource !== undefined) { const _errs118 = errors; if (typeof data.lightSource !== "boolean") { validate12.errors = [{ instancePath: instancePath + "/lightSource", schemaPath: "#/properties/lightSource/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs118 === errors; } else { var valid0 = true; } if (valid0) { if (data.originalAllegiance !== undefined) { let data52 = data.originalAllegiance; const _errs120 = errors; if (!(((typeof data52 == "number") && (!(data52 % 1) && !isNaN(data52))) && (isFinite(data52)))) { validate12.errors = [{ instancePath: instancePath + "/originalAllegiance", schemaPath: "#/properties/originalAllegiance/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs120 === errors; } else { var valid0 = true; } if (valid0) { if (data.siegeDate !== undefined) { let data53 = data.siegeDate; const _errs122 = errors; const _errs123 = errors; let valid7 = false; let passing3 = null; const _errs124 = errors; const _errs125 = errors; if (errors === _errs125) { if (typeof data53 === "string") { if (!pattern0.test(data53)) { const err12 = { instancePath: instancePath + "/siegeDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err12]; } else { vErrors.push(err12); } errors++; } } else { const err13 = { instancePath: instancePath + "/siegeDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err13]; } else { vErrors.push(err13); } errors++; } } var _valid3 = _errs124 === errors; if (_valid3) { valid7 = true; passing3 = 0; } const _errs127 = errors; if (data53 !== null) { const err14 = { instancePath: instancePath + "/siegeDate", schemaPath: "#/properties/siegeDate/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err14]; } else { vErrors.push(err14); } errors++; } var _valid3 = _errs127 === errors; if (_valid3 && valid7) { valid7 = false; passing3 = [passing3, 1]; } else { if (_valid3) { valid7 = true; passing3 = 1; } } if (!valid7) { const err15 = { instancePath: instancePath + "/siegeDate", schemaPath: "#/properties/siegeDate/oneOf", keyword: "oneOf", params: { passingSchemas: passing3 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err15]; } else { vErrors.push(err15); } errors++; validate12.errors = vErrors; return false; } else { errors = _errs123; if (vErrors !== null) { if (_errs123) { vErrors.length = _errs123; } else { vErrors = null; } } } var valid0 = _errs122 === errors; } else { var valid0 = true; } if (valid0) { if (data.noSiege !== undefined) { const _errs129 = errors; if (typeof data.noSiege !== "boolean") { validate12.errors = [{ instancePath: instancePath + "/noSiege", schemaPath: "#/properties/noSiege/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs129 === errors; } else { var valid0 = true; } if (valid0) { if (data.pImg !== undefined) { let data55 = data.pImg; const _errs131 = errors; if ((typeof data55 !== "string") && (data55 !== null)) { validate12.errors = [{ instancePath: instancePath + "/pImg", schemaPath: "#/properties/pImg/type", keyword: "type", params: { type: schema18.properties.pImg.type }, message: "must be string,null" }]; return false; } var valid0 = _errs131 === errors; } else { var valid0 = true; } if (valid0) { if (data.decayed !== undefined) { let data56 = data.decayed; const _errs133 = errors; if (!(((typeof data56 == "number") && (!(data56 % 1) && !isNaN(data56))) && (isFinite(data56)))) { validate12.errors = [{ instancePath: instancePath + "/decayed", schemaPath: "#/properties/decayed/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs133 === errors; } else { var valid0 = true; } if (valid0) { if (data.guildId !== undefined) { let data57 = data.guildId; const _errs135 = errors; if (!(((typeof data57 == "number") && (!(data57 % 1) && !isNaN(data57))) && (isFinite(data57)))) { validate12.errors = [{ instancePath: instancePath + "/guildId", schemaPath: "#/properties/guildId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs135 === errors; } else { var valid0 = true; } if (valid0) { if (data.soundEffect !== undefined) { let data58 = data.soundEffect; const _errs137 = errors; if ((typeof data58 !== "string") && (data58 !== null)) { validate12.errors = [{ instancePath: instancePath + "/soundEffect", schemaPath: "#/properties/soundEffect/type", keyword: "type", params: { type: schema18.properties.soundEffect.type }, message: "must be string,null" }]; return false; } var valid0 = _errs137 === errors; } else { var valid0 = true; } if (valid0) { if (data.forSale !== undefined) { const _errs139 = errors; if (typeof data.forSale !== "boolean") { validate12.errors = [{ instancePath: instancePath + "/forSale", schemaPath: "#/properties/forSale/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs139 === errors; } else { var valid0 = true; } if (valid0) { if (data.newColor !== undefined) { let data60 = data.newColor; const _errs141 = errors; if (!(((typeof data60 == "number") && (!(data60 % 1) && !isNaN(data60))) && (isFinite(data60)))) { validate12.errors = [{ instancePath: instancePath + "/newColor", schemaPath: "#/properties/newColor/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs141 === errors; } else { var valid0 = true; } if (valid0) { if (data.music !== undefined) { let data61 = data.music; const _errs143 = errors; if ((typeof data61 !== "string") && (data61 !== null)) { validate12.errors = [{ instancePath: instancePath + "/music", schemaPath: "#/properties/music/type", keyword: "type", params: { type: schema18.properties.music.type }, message: "must be string,null" }]; return false; } var valid0 = _errs143 === errors; } else { var valid0 = true; } if (valid0) { if (data.detectedBy !== undefined) { let data62 = data.detectedBy; const _errs145 = errors; if (!(((typeof data62 == "number") && (!(data62 % 1) && !isNaN(data62))) && (isFinite(data62)))) { validate12.errors = [{ instancePath: instancePath + "/detectedBy", schemaPath: "#/properties/detectedBy/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs145 === errors; } else { var valid0 = true; } if (valid0) { if (data.detectedDate !== undefined) { let data63 = data.detectedDate; const _errs147 = errors; const _errs148 = errors; if (errors === _errs148) { if (typeof data63 === "string") { if (!pattern0.test(data63)) { validate12.errors = [{ instancePath: instancePath + "/detectedDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate12.errors = [{ instancePath: instancePath + "/detectedDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs147 === errors; } else { var valid0 = true; } if (valid0) { if (data.detectedSkill !== undefined) { let data64 = data.detectedSkill; const _errs150 = errors; if (!(((typeof data64 == "number") && (!(data64 % 1) && !isNaN(data64))) && (isFinite(data64)))) { validate12.errors = [{ instancePath: instancePath + "/detectedSkill", schemaPath: "#/properties/detectedSkill/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs150 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingOrder !== undefined) { let data65 = data.buildingOrder; const _errs152 = errors; if (!(((typeof data65 == "number") && (!(data65 % 1) && !isNaN(data65))) && (isFinite(data65)))) { validate12.errors = [{ instancePath: instancePath + "/buildingOrder", schemaPath: "#/properties/buildingOrder/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs152 === errors; } else { var valid0 = true; } if (valid0) { if (data.challengeType !== undefined) { let data66 = data.challengeType; const _errs154 = errors; if (!(((typeof data66 == "number") && (!(data66 % 1) && !isNaN(data66))) && (isFinite(data66)))) { validate12.errors = [{ instancePath: instancePath + "/challengeType", schemaPath: "#/properties/challengeType/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs154 === errors; } else { var valid0 = true; } if (valid0) { if (data.challengeId !== undefined) { let data67 = data.challengeId; const _errs156 = errors; if (!(((typeof data67 == "number") && (!(data67 % 1) && !isNaN(data67))) && (isFinite(data67)))) { validate12.errors = [{ instancePath: instancePath + "/challengeId", schemaPath: "#/properties/challengeId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs156 === errors; } else { var valid0 = true; } if (valid0) { if (data.spawnSex !== undefined) { const _errs158 = errors; if (typeof data.spawnSex !== "string") { validate12.errors = [{ instancePath: instancePath + "/spawnSex", schemaPath: "#/properties/spawnSex/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs158 === errors; } else { var valid0 = true; } if (valid0) { if (data.spawnPicture !== undefined) { const _errs160 = errors; if (typeof data.spawnPicture !== "string") { validate12.errors = [{ instancePath: instancePath + "/spawnPicture", schemaPath: "#/properties/spawnPicture/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs160 === errors; } else { var valid0 = true; } if (valid0) { if (data.ownerAccountId !== undefined) { let data70 = data.ownerAccountId; const _errs162 = errors; if (!(((typeof data70 == "number") && (!(data70 % 1) && !isNaN(data70))) && (isFinite(data70)))) { validate12.errors = [{ instancePath: instancePath + "/ownerAccountId", schemaPath: "#/properties/ownerAccountId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs162 === errors; } else { var valid0 = true; } if (valid0) { if (data.buildingTag !== undefined) { const _errs164 = errors; if (typeof data.buildingTag !== "string") { validate12.errors = [{ instancePath: instancePath + "/buildingTag", schemaPath: "#/properties/buildingTag/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs164 === errors; } else { var valid0 = true; } if (valid0) { if (data.noDelete !== undefined) { const _errs166 = errors; if (typeof data.noDelete !== "boolean") { validate12.errors = [{ instancePath: instancePath + "/noDelete", schemaPath: "#/properties/noDelete/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs166 === errors; } else { var valid0 = true; } if (valid0) { if (data.needPaid !== undefined) { const _errs168 = errors; if (typeof data.needPaid !== "boolean") { validate12.errors = [{ instancePath: instancePath + "/needPaid", schemaPath: "#/properties/needPaid/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs168 === errors; } else { var valid0 = true; } if (valid0) { if (data.autoSpellId !== undefined) { let data74 = data.autoSpellId; const _errs170 = errors; if (!(((typeof data74 == "number") && (!(data74 % 1) && !isNaN(data74))) && (isFinite(data74)))) { validate12.errors = [{ instancePath: instancePath + "/autoSpellId", schemaPath: "#/properties/autoSpellId/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs170 === errors; } else { var valid0 = true; } if (valid0) { if (data.lastSpellCast !== undefined) { let data75 = data.lastSpellCast; const _errs172 = errors; const _errs173 = errors; let valid10 = false; let passing4 = null; const _errs174 = errors; const _errs175 = errors; if (errors === _errs175) { if (typeof data75 === "string") { if (!pattern0.test(data75)) { const err16 = { instancePath: instancePath + "/lastSpellCast", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err16]; } else { vErrors.push(err16); } errors++; } } else { const err17 = { instancePath: instancePath + "/lastSpellCast", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err17]; } else { vErrors.push(err17); } errors++; } } var _valid4 = _errs174 === errors; if (_valid4) { valid10 = true; passing4 = 0; } const _errs177 = errors; if (data75 !== null) { const err18 = { instancePath: instancePath + "/lastSpellCast", schemaPath: "#/properties/lastSpellCast/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err18]; } else { vErrors.push(err18); } errors++; } var _valid4 = _errs177 === errors; if (_valid4 && valid10) { valid10 = false; passing4 = [passing4, 1]; } else { if (_valid4) { valid10 = true; passing4 = 1; } } if (!valid10) { const err19 = { instancePath: instancePath + "/lastSpellCast", schemaPath: "#/properties/lastSpellCast/oneOf", keyword: "oneOf", params: { passingSchemas: passing4 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err19]; } else { vErrors.push(err19); } errors++; validate12.errors = vErrors; return false; } else { errors = _errs173; if (vErrors !== null) { if (_errs173) { vErrors.length = _errs173; } else { vErrors = null; } } } var valid0 = _errs172 === errors; } else { var valid0 = true; } if (valid0) { if (data.bLootItemName !== undefined) { let data76 = data.bLootItemName; const _errs179 = errors; if ((typeof data76 !== "string") && (data76 !== null)) { validate12.errors = [{ instancePath: instancePath + "/bLootItemName", schemaPath: "#/properties/bLootItemName/type", keyword: "type", params: { type: schema18.properties.bLootItemName.type }, message: "must be string,null" }]; return false; } var valid0 = _errs179 === errors; } else { var valid0 = true; } if (valid0) { if (data.bLootItemPicture !== undefined) { let data77 = data.bLootItemPicture; const _errs181 = errors; if ((typeof data77 !== "string") && (data77 !== null)) { validate12.errors = [{ instancePath: instancePath + "/bLootItemPicture", schemaPath: "#/properties/bLootItemPicture/type", keyword: "type", params: { type: schema18.properties.bLootItemPicture.type }, message: "must be string,null" }]; return false; } var valid0 = _errs181 === errors; } else { var valid0 = true; } if (valid0) { if (data.allowIndex !== undefined) { let data78 = data.allowIndex; const _errs183 = errors; if (!(((typeof data78 == "number") && (!(data78 % 1) && !isNaN(data78))) && (isFinite(data78)))) { validate12.errors = [{ instancePath: instancePath + "/allowIndex", schemaPath: "#/properties/allowIndex/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs183 === errors; } else { var valid0 = true; } if (valid0) { if (data.lordshipRating !== undefined) { let data79 = data.lordshipRating; const _errs185 = errors; if (!(((typeof data79 == "number") && (!(data79 % 1) && !isNaN(data79))) && (isFinite(data79)))) { validate12.errors = [{ instancePath: instancePath + "/lordshipRating", schemaPath: "#/properties/lordshipRating/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs185 === errors; } else { var valid0 = true; } if (valid0) { if (data.peasants !== undefined) { let data80 = data.peasants; const _errs187 = errors; if (!(((typeof data80 == "number") && (!(data80 % 1) && !isNaN(data80))) && (isFinite(data80)))) { validate12.errors = [{ instancePath: instancePath + "/peasants", schemaPath: "#/properties/peasants/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs187 === errors; } else { var valid0 = true; } if (valid0) { if (data.happiness !== undefined) { let data81 = data.happiness; const _errs189 = errors; if (!(((typeof data81 == "number") && (!(data81 % 1) && !isNaN(data81))) && (isFinite(data81)))) { validate12.errors = [{ instancePath: instancePath + "/happiness", schemaPath: "#/properties/happiness/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs189 === errors; } else { var valid0 = true; } if (valid0) { if (data.dirty !== undefined) { let data82 = data.dirty; const _errs191 = errors; const _errs192 = errors; if (errors === _errs192) { if (typeof data82 === "string") { if (!pattern0.test(data82)) { validate12.errors = [{ instancePath: instancePath + "/dirty", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate12.errors = [{ instancePath: instancePath + "/dirty", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs191 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } else { validate12.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate12.errors = vErrors; return errors === 0; } function validate11(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) { if (Array.isArray(data)) { var valid0 = true; const len0 = data.length; for (let i0 = 0; i0 < len0; i0++) { const _errs1 = errors; if (!(validate12(data[i0], { instancePath: instancePath + "/" + i0, parentData: data, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors); errors = vErrors.length; } var valid0 = _errs1 === errors; if (!valid0) { break; } } } else { validate11.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } validate11.errors = vErrors; return errors === 0; } export const validateBuilding = validate12; export const validateCharacterProfile = validate14; const schema26 = { "$id": "https://data.landsofhope.com/schemas/v0/characters/character-profile.json", "type": "object", "additionalProperties": false, "properties": { "$type": { "const": "/v0/characters/character-profile" }, "CharacterProfileID": { "type": "integer" }, "CharacterID": { "type": "integer" }, "CPTitle": { "oneOf": [{ "type": "string", "maxLength": 30 }, { "type": "null" }] }, "CPPictureID": { "oneOf": [{ "type": "string", "maxLength": 15 }, { "type": "null" }] }, "CPName": { "oneOf": [{ "type": "string", "maxLength": 50 }, { "type": "null" }] }, "CPDate": { "$ref": "/schemas/v0/datetime.json" }, "CPDefault": { "type": "integer" }, "CPRaceTitle": { "oneOf": [{ "type": "integer" }, { "type": "null" }] }, "CPChatTag": { "type": "string", "maxLength": 25 }, "CPChatTagOff": { "type": "integer" } }, "required": ["$type", "CharacterProfileID", "CPDate", "CPChatTag", "CPChatTagOff"], "title": "CharacterProfile" }; function validate14(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((((data.$type === undefined) && (missing0 = "$type")) || ((data.CharacterProfileID === undefined) && (missing0 = "CharacterProfileID"))) || ((data.CPDate === undefined) && (missing0 = "CPDate"))) || ((data.CPChatTag === undefined) && (missing0 = "CPChatTag"))) || ((data.CPChatTagOff === undefined) && (missing0 = "CPChatTagOff"))) { validate14.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func2.call(schema26.properties, key0))) { validate14.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.$type !== undefined) { const _errs2 = errors; if ("/v0/characters/character-profile" !== data.$type) { validate14.errors = [{ instancePath: instancePath + "/$type", schemaPath: "#/properties/%24type/const", keyword: "const", params: { allowedValue: "/v0/characters/character-profile" }, message: "must be equal to constant" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.CharacterProfileID !== undefined) { let data1 = data.CharacterProfileID; const _errs3 = errors; if (!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))) { validate14.errors = [{ instancePath: instancePath + "/CharacterProfileID", schemaPath: "#/properties/CharacterProfileID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs3 === errors; } else { var valid0 = true; } if (valid0) { if (data.CharacterID !== undefined) { let data2 = data.CharacterID; const _errs5 = errors; if (!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))) { validate14.errors = [{ instancePath: instancePath + "/CharacterID", schemaPath: "#/properties/CharacterID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.CPTitle !== undefined) { let data3 = data.CPTitle; const _errs7 = errors; const _errs8 = errors; let valid1 = false; let passing0 = null; const _errs9 = errors; if (errors === _errs9) { if (typeof data3 === "string") { if (func3(data3) > 30) { const err0 = { instancePath: instancePath + "/CPTitle", schemaPath: "#/properties/CPTitle/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 30 }, message: "must NOT have more than 30 characters" }; if (vErrors === null) { vErrors = [err0]; } else { vErrors.push(err0); } errors++; } } else { const err1 = { instancePath: instancePath + "/CPTitle", schemaPath: "#/properties/CPTitle/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err1]; } else { vErrors.push(err1); } errors++; } } var _valid0 = _errs9 === errors; if (_valid0) { valid1 = true; passing0 = 0; } const _errs11 = errors; if (data3 !== null) { const err2 = { instancePath: instancePath + "/CPTitle", schemaPath: "#/properties/CPTitle/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err2]; } else { vErrors.push(err2); } errors++; } var _valid0 = _errs11 === errors; if (_valid0 && valid1) { valid1 = false; passing0 = [passing0, 1]; } else { if (_valid0) { valid1 = true; passing0 = 1; } } if (!valid1) { const err3 = { instancePath: instancePath + "/CPTitle", schemaPath: "#/properties/CPTitle/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err3]; } else { vErrors.push(err3); } errors++; validate14.errors = vErrors; return false; } else { errors = _errs8; if (vErrors !== null) { if (_errs8) { vErrors.length = _errs8; } else { vErrors = null; } } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.CPPictureID !== undefined) { let data4 = data.CPPictureID; const _errs13 = errors; const _errs14 = errors; let valid2 = false; let passing1 = null; const _errs15 = errors; if (errors === _errs15) { if (typeof data4 === "string") { if (func3(data4) > 15) { const err4 = { instancePath: instancePath + "/CPPictureID", schemaPath: "#/properties/CPPictureID/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 15 }, message: "must NOT have more than 15 characters" }; if (vErrors === null) { vErrors = [err4]; } else { vErrors.push(err4); } errors++; } } else { const err5 = { instancePath: instancePath + "/CPPictureID", schemaPath: "#/properties/CPPictureID/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err5]; } else { vErrors.push(err5); } errors++; } } var _valid1 = _errs15 === errors; if (_valid1) { valid2 = true; passing1 = 0; } const _errs17 = errors; if (data4 !== null) { const err6 = { instancePath: instancePath + "/CPPictureID", schemaPath: "#/properties/CPPictureID/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err6]; } else { vErrors.push(err6); } errors++; } var _valid1 = _errs17 === errors; if (_valid1 && valid2) { valid2 = false; passing1 = [passing1, 1]; } else { if (_valid1) { valid2 = true; passing1 = 1; } } if (!valid2) { const err7 = { instancePath: instancePath + "/CPPictureID", schemaPath: "#/properties/CPPictureID/oneOf", keyword: "oneOf", params: { passingSchemas: passing1 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err7]; } else { vErrors.push(err7); } errors++; validate14.errors = vErrors; return false; } else { errors = _errs14; if (vErrors !== null) { if (_errs14) { vErrors.length = _errs14; } else { vErrors = null; } } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.CPName !== undefined) { let data5 = data.CPName; const _errs19 = errors; const _errs20 = errors; let valid3 = false; let passing2 = null; const _errs21 = errors; if (errors === _errs21) { if (typeof data5 === "string") { if (func3(data5) > 50) { const err8 = { instancePath: instancePath + "/CPName", schemaPath: "#/properties/CPName/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 50 }, message: "must NOT have more than 50 characters" }; if (vErrors === null) { vErrors = [err8]; } else { vErrors.push(err8); } errors++; } } else { const err9 = { instancePath: instancePath + "/CPName", schemaPath: "#/properties/CPName/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err9]; } else { vErrors.push(err9); } errors++; } } var _valid2 = _errs21 === errors; if (_valid2) { valid3 = true; passing2 = 0; } const _errs23 = errors; if (data5 !== null) { const err10 = { instancePath: instancePath + "/CPName", schemaPath: "#/properties/CPName/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err10]; } else { vErrors.push(err10); } errors++; } var _valid2 = _errs23 === errors; if (_valid2 && valid3) { valid3 = false; passing2 = [passing2, 1]; } else { if (_valid2) { valid3 = true; passing2 = 1; } } if (!valid3) { const err11 = { instancePath: instancePath + "/CPName", schemaPath: "#/properties/CPName/oneOf", keyword: "oneOf", params: { passingSchemas: passing2 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err11]; } else { vErrors.push(err11); } errors++; validate14.errors = vErrors; return false; } else { errors = _errs20; if (vErrors !== null) { if (_errs20) { vErrors.length = _errs20; } else { vErrors = null; } } } var valid0 = _errs19 === errors; } else { var valid0 = true; } if (valid0) { if (data.CPDate !== undefined) { let data6 = data.CPDate; const _errs25 = errors; const _errs26 = errors; if (errors === _errs26) { if (typeof data6 === "string") { if (!pattern0.test(data6)) { validate14.errors = [{ instancePath: instancePath + "/CPDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate14.errors = [{ instancePath: instancePath + "/CPDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.CPDefault !== undefined) { let data7 = data.CPDefault; const _errs28 = errors; if (!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))) { validate14.errors = [{ instancePath: instancePath + "/CPDefault", schemaPath: "#/properties/CPDefault/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs28 === errors; } else { var valid0 = true; } if (valid0) { if (data.CPRaceTitle !== undefined) { let data8 = data.CPRaceTitle; const _errs30 = errors; const _errs31 = errors; let valid5 = false; let passing3 = null; const _errs32 = errors; if (!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))) { const err12 = { instancePath: instancePath + "/CPRaceTitle", schemaPath: "#/properties/CPRaceTitle/oneOf/0/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }; if (vErrors === null) { vErrors = [err12]; } else { vErrors.push(err12); } errors++; } var _valid3 = _errs32 === errors; if (_valid3) { valid5 = true; passing3 = 0; } const _errs34 = errors; if (data8 !== null) { const err13 = { instancePath: instancePath + "/CPRaceTitle", schemaPath: "#/properties/CPRaceTitle/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err13]; } else { vErrors.push(err13); } errors++; } var _valid3 = _errs34 === errors; if (_valid3 && valid5) { valid5 = false; passing3 = [passing3, 1]; } else { if (_valid3) { valid5 = true; passing3 = 1; } } if (!valid5) { const err14 = { instancePath: instancePath + "/CPRaceTitle", schemaPath: "#/properties/CPRaceTitle/oneOf", keyword: "oneOf", params: { passingSchemas: passing3 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err14]; } else { vErrors.push(err14); } errors++; validate14.errors = vErrors; return false; } else { errors = _errs31; if (vErrors !== null) { if (_errs31) { vErrors.length = _errs31; } else { vErrors = null; } } } var valid0 = _errs30 === errors; } else { var valid0 = true; } if (valid0) { if (data.CPChatTag !== undefined) { let data9 = data.CPChatTag; const _errs36 = errors; if (errors === _errs36) { if (typeof data9 === "string") { if (func3(data9) > 25) { validate14.errors = [{ instancePath: instancePath + "/CPChatTag", schemaPath: "#/properties/CPChatTag/maxLength", keyword: "maxLength", params: { limit: 25 }, message: "must NOT have more than 25 characters" }]; return false; } } else { validate14.errors = [{ instancePath: instancePath + "/CPChatTag", schemaPath: "#/properties/CPChatTag/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs36 === errors; } else { var valid0 = true; } if (valid0) { if (data.CPChatTagOff !== undefined) { let data10 = data.CPChatTagOff; const _errs38 = errors; if (!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))) { validate14.errors = [{ instancePath: instancePath + "/CPChatTagOff", schemaPath: "#/properties/CPChatTagOff/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs38 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } else { validate14.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate14.errors = vErrors; return errors === 0; } export const validateCharacterSex = validate15; const schema28 = { "$id": "https://data.landsofhope.com/schemas/v0/characters/character-sex.json", "enum": ["U", "F", "M"], "title": "CharacterSex" }; function validate15(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (!(((data === "U") || (data === "F")) || (data === "M"))) { validate15.errors = [{ instancePath, schemaPath: "#/enum", keyword: "enum", params: { allowedValues: schema28.enum }, message: "must be equal to one of the allowed values" }]; return false; } validate15.errors = vErrors; return errors === 0; } export const validateCharacter = validate16; const schema29 = { "$id": "https://data.landsofhope.com/schemas/v0/characters/character.json", "type": "object", "additionalProperties": false, "properties": { "$type": { "const": "/v0/characters/character" }, "CharacterID": { "type": "integer" }, "CharacterName": { "type": "string", "maxLength": 50 }, "NPC": { "type": "integer" }, "Player": { "type": "integer" }, "Monster": { "type": "integer" }, "Sex": { "$ref": "/schemas/v0/characters/character-sex.json" }, "RaceID": { "type": "integer" }, "ProfessionID": { "type": "integer" }, "UserPword": { "type": "string", "maxLength": 10 }, "Experience": { "type": "integer" }, "Level": { "type": "integer" }, "Title": { "type": "string" }, "MapX": { "type": "integer" }, "MapY": { "type": "integer" }, "Credits": { "type": "integer" }, "KillCount": { "type": "integer" }, "SiegeCount": { "type": "integer" }, "DeathCount": { "type": "integer" }, "PKCount": { "type": "integer" }, "MasterCharacterID": { "type": "integer" }, "System": { "type": "integer" }, "MountedCharacterID": { "type": "integer" }, "Visible": { "type": "integer" }, "GuildID": { "type": "integer" }, "GuildJoined": { "$ref": "/schemas/v0/datetime.json" }, "Following": { "type": "integer" }, "GuildLevel": { "type": "integer" }, "GuildTitle": { "oneOf": [{ "type": "string", "maxLength": 40 }, { "type": "null" }] }, "GuildFame": { "type": "number" }, "OrigName": { "oneOf": [{ "type": "string", "maxLength": 60 }, { "type": "null" }] }, "OrigSex": { "oneOf": [{ "$ref": "/schemas/v0/characters/character-sex.json" }, { "type": "null" }] }, "OrigRaceID": { "type": "integer" }, "OrigProfessionID": { "type": "integer" }, "OrigTitle": { "oneOf": [{ "type": "string", "maxLength": 30 }, { "type": "null" }] }, "SummonerID": { "type": "integer" }, "GameID": { "type": "integer" }, "CompletedQuests": { "type": "integer" }, "Bounty": { "type": "number" }, "TransactionID": { "oneOf": [{ "type": "string", "maxLength": 17 }, { "type": "null" }] }, "LastActive": { "$ref": "/schemas/v0/datetime.json" }, "Jailed": { "type": "integer" }, "ReleaseDate": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "Dead": { "type": "integer" }, "Quest": { "type": "integer" }, "PosessedID": { "type": "integer" }, "DuelCount": { "type": "integer" }, "AvACount": { "type": "integer" }, "PictureID": { "type": "string", "maxLength": 15 }, "LastChange": { "$ref": "/schemas/v0/datetime.json" }, "LastAlter": { "$ref": "/schemas/v0/datetime.json" }, "Crimes": { "type": "integer" }, "Building": { "type": "integer" }, "ActiveFactionID": { "type": "integer" }, "GroupID": { "type": "integer" }, "LastDied": { "$ref": "/schemas/v0/datetime.json" }, "LastResurrected": { "$ref": "/schemas/v0/datetime.json" }, "SpecialBonus": { "type": "integer" }, "Mayor": { "type": "integer" }, "QuestID": { "type": "integer" }, "Tutorial": { "type": "integer" }, "Upgrade1": { "type": "integer" }, "Upgrade2": { "type": "integer" }, "OA": { "type": "integer" }, "QueueBonus": { "type": "integer" }, "PetBonus": { "type": "integer" }, "BuildingBonus": { "type": "integer" }, "VM": { "type": "integer" }, "AltPictureID": { "type": "string", "maxLength": 15 }, "AltPictureID2": { "type": "string", "maxLength": 15 }, "OrigItemID": { "type": "integer" }, "OrigSpellID": { "type": "integer" }, "OrigAllegiance": { "type": "integer" }, "OrigMaterial": { "type": "string", "maxLength": 25 }, "BonusCurrency": { "type": "number" }, "HeldCurrency": { "type": "number" }, "BornDate": { "$ref": "/schemas/v0/datetime.json" }, "Server": { "type": "integer" }, "AllowTame": { "type": "boolean" }, "CharacterStatus": { "type": "integer" }, "AllowedArmor": { "type": "integer" }, "Looter": { "type": "integer" }, "PetPrice": { "type": "number" }, "Allegiance": { "type": "integer" }, "AllegianceValue": { "type": "integer" }, "AllegianceRank": { "type": "integer" }, "AllegianceTitle": { "type": "string", "maxLength": 20 }, "Discoveries": { "type": "integer" }, "FirstRaceID": { "type": "integer" }, "FirstProfessionID": { "type": "integer" }, "AccountID": { "type": "integer" }, "DungeonMaster": { "type": "integer" }, "DungeonKills": { "type": "integer" }, "DungeonDeaths": { "type": "integer" }, "VisibleStealthed": { "type": "integer" }, "VisibleDead": { "type": "integer" }, "ForSale": { "type": "integer" }, "BankBonus": { "type": "integer" }, "Captures": { "type": "integer" }, "UnresolvedFights": { "type": "integer" }, "FontColor": { "type": "string", "maxLength": 6 }, "FontSize": { "type": "integer" }, "FontName": { "type": "string", "maxLength": 15 }, "CharacterMenu": { "type": "integer" }, "TownMapID": { "type": "integer" }, "ScriptID": { "type": "integer" }, "SkillValue1": { "type": "integer" }, "SkillValue2": { "type": "integer" }, "DM": { "type": "integer" }, "LegendToken": { "type": "integer" }, "LegendTotalTokens": { "type": "integer" }, "VisibleLevel": { "type": "integer" }, "Taunt": { "type": "integer" }, "LastLogout": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "PlayerLegend": { "type": "integer" }, "PKCountTotal": { "type": "integer" }, "EOff": { "type": "integer" }, "LastPlayerKilled": { "oneOf": [{ "$ref": "/schemas/v0/datetime.json" }, { "type": "null" }] }, "LastLevelled": { "$ref": "/schemas/v0/datetime.json" }, "SubLevel": { "type": "integer" }, "SubLevelPoints": { "type": "integer" }, "Thefts": { "type": "integer" }, "UnreadMail": { "type": "integer" }, "Spawner": { "type": "integer" }, "LastDiedBuilding": { "type": "integer" }, "AllowRide": { "type": "boolean" }, "TreasureHuntTotal": { "type": "integer" }, "ActualClass": { "type": "string", "maxLength": 15 }, "LootMoneyBonus": { "type": "number" }, "LootItemBonus": { "type": "integer" }, "GuildMessages": { "type": "integer" }, "AllegianceMessages": { "type": "integer" }, "QueueTimeBonus": { "type": "integer" }, "QueueItemBonus": { "type": "integer" }, "PirateNotoriety": { "type": "integer" }, "PirateFame": { "type": "integer" }, "PirateMoney": { "type": "number" }, "PirateRank": { "type": "integer" }, "CurrentFactionID": { "type": "integer" }, "HasPets": { "type": "integer" }, "PvPFame": { "type": "integer" }, "PvPRank": { "type": "integer" }, "PVPStatus": { "type": "integer" }, "PvPDate": { "$ref": "/schemas/v0/datetime.json" }, "BeenPossessed": { "type": "integer" }, "DemonPower": { "type": "integer" }, "StableSlots": { "type": "integer" }, "QuestOrTrophy": { "type": "integer" }, "MobileCharacter": { "type": "integer" }, "MobileFilter": { "type": "integer" } }, "required": ["$type", "CharacterID", "CharacterName", "Sex", "NPC", "Player", "Monster", "MapX", "MapY", "System", "Visible", "Following", "Jailed", "Dead", "Quest", "PictureID", "ActiveFactionID", "GroupID", "SpecialBonus", "Mayor", "QuestID", "Tutorial", "Upgrade1", "Upgrade2", "OA", "QueueBonus", "PetBonus", "BuildingBonus", "VM", "AltPictureID", "AltPictureID2", "OrigItemID", "OrigSpellID", "OrigAllegiance", "OrigMaterial", "BonusCurrency", "HeldCurrency", "BornDate", "Server", "AllowTame", "CharacterStatus", "AllowedArmor", "Looter", "PetPrice", "Allegiance", "AllegianceValue", "AllegianceRank", "AllegianceTitle", "Discoveries", "FirstRaceID", "FirstProfessionID", "DungeonMaster", "DungeonKills", "DungeonDeaths", "VisibleStealthed", "VisibleDead"], "title": "Character" }; function validate16(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((((((((((((((((((((((((((((((((((((((((((((((((((((((data.$type === undefined) && (missing0 = "$type")) || ((data.CharacterID === undefined) && (missing0 = "CharacterID"))) || ((data.CharacterName === undefined) && (missing0 = "CharacterName"))) || ((data.Sex === undefined) && (missing0 = "Sex"))) || ((data.NPC === undefined) && (missing0 = "NPC"))) || ((data.Player === undefined) && (missing0 = "Player"))) || ((data.Monster === undefined) && (missing0 = "Monster"))) || ((data.MapX === undefined) && (missing0 = "MapX"))) || ((data.MapY === undefined) && (missing0 = "MapY"))) || ((data.System === undefined) && (missing0 = "System"))) || ((data.Visible === undefined) && (missing0 = "Visible"))) || ((data.Following === undefined) && (missing0 = "Following"))) || ((data.Jailed === undefined) && (missing0 = "Jailed"))) || ((data.Dead === undefined) && (missing0 = "Dead"))) || ((data.Quest === undefined) && (missing0 = "Quest"))) || ((data.PictureID === undefined) && (missing0 = "PictureID"))) || ((data.ActiveFactionID === undefined) && (missing0 = "ActiveFactionID"))) || ((data.GroupID === undefined) && (missing0 = "GroupID"))) || ((data.SpecialBonus === undefined) && (missing0 = "SpecialBonus"))) || ((data.Mayor === undefined) && (missing0 = "Mayor"))) || ((data.QuestID === undefined) && (missing0 = "QuestID"))) || ((data.Tutorial === undefined) && (missing0 = "Tutorial"))) || ((data.Upgrade1 === undefined) && (missing0 = "Upgrade1"))) || ((data.Upgrade2 === undefined) && (missing0 = "Upgrade2"))) || ((data.OA === undefined) && (missing0 = "OA"))) || ((data.QueueBonus === undefined) && (missing0 = "QueueBonus"))) || ((data.PetBonus === undefined) && (missing0 = "PetBonus"))) || ((data.BuildingBonus === undefined) && (missing0 = "BuildingBonus"))) || ((data.VM === undefined) && (missing0 = "VM"))) || ((data.AltPictureID === undefined) && (missing0 = "AltPictureID"))) || ((data.AltPictureID2 === undefined) && (missing0 = "AltPictureID2"))) || ((data.OrigItemID === undefined) && (missing0 = "OrigItemID"))) || ((data.OrigSpellID === undefined) && (missing0 = "OrigSpellID"))) || ((data.OrigAllegiance === undefined) && (missing0 = "OrigAllegiance"))) || ((data.OrigMaterial === undefined) && (missing0 = "OrigMaterial"))) || ((data.BonusCurrency === undefined) && (missing0 = "BonusCurrency"))) || ((data.HeldCurrency === undefined) && (missing0 = "HeldCurrency"))) || ((data.BornDate === undefined) && (missing0 = "BornDate"))) || ((data.Server === undefined) && (missing0 = "Server"))) || ((data.AllowTame === undefined) && (missing0 = "AllowTame"))) || ((data.CharacterStatus === undefined) && (missing0 = "CharacterStatus"))) || ((data.AllowedArmor === undefined) && (missing0 = "AllowedArmor"))) || ((data.Looter === undefined) && (missing0 = "Looter"))) || ((data.PetPrice === undefined) && (missing0 = "PetPrice"))) || ((data.Allegiance === undefined) && (missing0 = "Allegiance"))) || ((data.AllegianceValue === undefined) && (missing0 = "AllegianceValue"))) || ((data.AllegianceRank === undefined) && (missing0 = "AllegianceRank"))) || ((data.AllegianceTitle === undefined) && (missing0 = "AllegianceTitle"))) || ((data.Discoveries === undefined) && (missing0 = "Discoveries"))) || ((data.FirstRaceID === undefined) && (missing0 = "FirstRaceID"))) || ((data.FirstProfessionID === undefined) && (missing0 = "FirstProfessionID"))) || ((data.DungeonMaster === undefined) && (missing0 = "DungeonMaster"))) || ((data.DungeonKills === undefined) && (missing0 = "DungeonKills"))) || ((data.DungeonDeaths === undefined) && (missing0 = "DungeonDeaths"))) || ((data.VisibleStealthed === undefined) && (missing0 = "VisibleStealthed"))) || ((data.VisibleDead === undefined) && (missing0 = "VisibleDead"))) { validate16.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func2.call(schema29.properties, key0))) { validate16.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.$type !== undefined) { const _errs2 = errors; if ("/v0/characters/character" !== data.$type) { validate16.errors = [{ instancePath: instancePath + "/$type", schemaPath: "#/properties/%24type/const", keyword: "const", params: { allowedValue: "/v0/characters/character" }, message: "must be equal to constant" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.CharacterID !== undefined) { let data1 = data.CharacterID; const _errs3 = errors; if (!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))) { validate16.errors = [{ instancePath: instancePath + "/CharacterID", schemaPath: "#/properties/CharacterID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs3 === errors; } else { var valid0 = true; } if (valid0) { if (data.CharacterName !== undefined) { let data2 = data.CharacterName; const _errs5 = errors; if (errors === _errs5) { if (typeof data2 === "string") { if (func3(data2) > 50) { validate16.errors = [{ instancePath: instancePath + "/CharacterName", schemaPath: "#/properties/CharacterName/maxLength", keyword: "maxLength", params: { limit: 50 }, message: "must NOT have more than 50 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/CharacterName", schemaPath: "#/properties/CharacterName/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.NPC !== undefined) { let data3 = data.NPC; const _errs7 = errors; if (!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))) { validate16.errors = [{ instancePath: instancePath + "/NPC", schemaPath: "#/properties/NPC/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.Player !== undefined) { let data4 = data.Player; const _errs9 = errors; if (!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))) { validate16.errors = [{ instancePath: instancePath + "/Player", schemaPath: "#/properties/Player/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.Monster !== undefined) { let data5 = data.Monster; const _errs11 = errors; if (!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))) { validate16.errors = [{ instancePath: instancePath + "/Monster", schemaPath: "#/properties/Monster/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.Sex !== undefined) { let data6 = data.Sex; const _errs13 = errors; if (!(((data6 === "U") || (data6 === "F")) || (data6 === "M"))) { validate16.errors = [{ instancePath: instancePath + "/Sex", schemaPath: "/schemas/v0/characters/character-sex.json/enum", keyword: "enum", params: { allowedValues: schema28.enum }, message: "must be equal to one of the allowed values" }]; return false; } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.RaceID !== undefined) { let data7 = data.RaceID; const _errs15 = errors; if (!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))) { validate16.errors = [{ instancePath: instancePath + "/RaceID", schemaPath: "#/properties/RaceID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.ProfessionID !== undefined) { let data8 = data.ProfessionID; const _errs17 = errors; if (!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))) { validate16.errors = [{ instancePath: instancePath + "/ProfessionID", schemaPath: "#/properties/ProfessionID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs17 === errors; } else { var valid0 = true; } if (valid0) { if (data.UserPword !== undefined) { let data9 = data.UserPword; const _errs19 = errors; if (errors === _errs19) { if (typeof data9 === "string") { if (func3(data9) > 10) { validate16.errors = [{ instancePath: instancePath + "/UserPword", schemaPath: "#/properties/UserPword/maxLength", keyword: "maxLength", params: { limit: 10 }, message: "must NOT have more than 10 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/UserPword", schemaPath: "#/properties/UserPword/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs19 === errors; } else { var valid0 = true; } if (valid0) { if (data.Experience !== undefined) { let data10 = data.Experience; const _errs21 = errors; if (!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))) { validate16.errors = [{ instancePath: instancePath + "/Experience", schemaPath: "#/properties/Experience/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.Level !== undefined) { let data11 = data.Level; const _errs23 = errors; if (!(((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11))) && (isFinite(data11)))) { validate16.errors = [{ instancePath: instancePath + "/Level", schemaPath: "#/properties/Level/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.Title !== undefined) { const _errs25 = errors; if (typeof data.Title !== "string") { validate16.errors = [{ instancePath: instancePath + "/Title", schemaPath: "#/properties/Title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.MapX !== undefined) { let data13 = data.MapX; const _errs27 = errors; if (!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))) { validate16.errors = [{ instancePath: instancePath + "/MapX", schemaPath: "#/properties/MapX/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.MapY !== undefined) { let data14 = data.MapY; const _errs29 = errors; if (!(((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14))) && (isFinite(data14)))) { validate16.errors = [{ instancePath: instancePath + "/MapY", schemaPath: "#/properties/MapY/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.Credits !== undefined) { let data15 = data.Credits; const _errs31 = errors; if (!(((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15))) && (isFinite(data15)))) { validate16.errors = [{ instancePath: instancePath + "/Credits", schemaPath: "#/properties/Credits/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs31 === errors; } else { var valid0 = true; } if (valid0) { if (data.KillCount !== undefined) { let data16 = data.KillCount; const _errs33 = errors; if (!(((typeof data16 == "number") && (!(data16 % 1) && !isNaN(data16))) && (isFinite(data16)))) { validate16.errors = [{ instancePath: instancePath + "/KillCount", schemaPath: "#/properties/KillCount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs33 === errors; } else { var valid0 = true; } if (valid0) { if (data.SiegeCount !== undefined) { let data17 = data.SiegeCount; const _errs35 = errors; if (!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))) { validate16.errors = [{ instancePath: instancePath + "/SiegeCount", schemaPath: "#/properties/SiegeCount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs35 === errors; } else { var valid0 = true; } if (valid0) { if (data.DeathCount !== undefined) { let data18 = data.DeathCount; const _errs37 = errors; if (!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))) { validate16.errors = [{ instancePath: instancePath + "/DeathCount", schemaPath: "#/properties/DeathCount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs37 === errors; } else { var valid0 = true; } if (valid0) { if (data.PKCount !== undefined) { let data19 = data.PKCount; const _errs39 = errors; if (!(((typeof data19 == "number") && (!(data19 % 1) && !isNaN(data19))) && (isFinite(data19)))) { validate16.errors = [{ instancePath: instancePath + "/PKCount", schemaPath: "#/properties/PKCount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs39 === errors; } else { var valid0 = true; } if (valid0) { if (data.MasterCharacterID !== undefined) { let data20 = data.MasterCharacterID; const _errs41 = errors; if (!(((typeof data20 == "number") && (!(data20 % 1) && !isNaN(data20))) && (isFinite(data20)))) { validate16.errors = [{ instancePath: instancePath + "/MasterCharacterID", schemaPath: "#/properties/MasterCharacterID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs41 === errors; } else { var valid0 = true; } if (valid0) { if (data.System !== undefined) { let data21 = data.System; const _errs43 = errors; if (!(((typeof data21 == "number") && (!(data21 % 1) && !isNaN(data21))) && (isFinite(data21)))) { validate16.errors = [{ instancePath: instancePath + "/System", schemaPath: "#/properties/System/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs43 === errors; } else { var valid0 = true; } if (valid0) { if (data.MountedCharacterID !== undefined) { let data22 = data.MountedCharacterID; const _errs45 = errors; if (!(((typeof data22 == "number") && (!(data22 % 1) && !isNaN(data22))) && (isFinite(data22)))) { validate16.errors = [{ instancePath: instancePath + "/MountedCharacterID", schemaPath: "#/properties/MountedCharacterID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs45 === errors; } else { var valid0 = true; } if (valid0) { if (data.Visible !== undefined) { let data23 = data.Visible; const _errs47 = errors; if (!(((typeof data23 == "number") && (!(data23 % 1) && !isNaN(data23))) && (isFinite(data23)))) { validate16.errors = [{ instancePath: instancePath + "/Visible", schemaPath: "#/properties/Visible/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs47 === errors; } else { var valid0 = true; } if (valid0) { if (data.GuildID !== undefined) { let data24 = data.GuildID; const _errs49 = errors; if (!(((typeof data24 == "number") && (!(data24 % 1) && !isNaN(data24))) && (isFinite(data24)))) { validate16.errors = [{ instancePath: instancePath + "/GuildID", schemaPath: "#/properties/GuildID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs49 === errors; } else { var valid0 = true; } if (valid0) { if (data.GuildJoined !== undefined) { let data25 = data.GuildJoined; const _errs51 = errors; const _errs52 = errors; if (errors === _errs52) { if (typeof data25 === "string") { if (!pattern0.test(data25)) { validate16.errors = [{ instancePath: instancePath + "/GuildJoined", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/GuildJoined", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs51 === errors; } else { var valid0 = true; } if (valid0) { if (data.Following !== undefined) { let data26 = data.Following; const _errs54 = errors; if (!(((typeof data26 == "number") && (!(data26 % 1) && !isNaN(data26))) && (isFinite(data26)))) { validate16.errors = [{ instancePath: instancePath + "/Following", schemaPath: "#/properties/Following/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs54 === errors; } else { var valid0 = true; } if (valid0) { if (data.GuildLevel !== undefined) { let data27 = data.GuildLevel; const _errs56 = errors; if (!(((typeof data27 == "number") && (!(data27 % 1) && !isNaN(data27))) && (isFinite(data27)))) { validate16.errors = [{ instancePath: instancePath + "/GuildLevel", schemaPath: "#/properties/GuildLevel/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs56 === errors; } else { var valid0 = true; } if (valid0) { if (data.GuildTitle !== undefined) { let data28 = data.GuildTitle; const _errs58 = errors; const _errs59 = errors; let valid3 = false; let passing0 = null; const _errs60 = errors; if (errors === _errs60) { if (typeof data28 === "string") { if (func3(data28) > 40) { const err0 = { instancePath: instancePath + "/GuildTitle", schemaPath: "#/properties/GuildTitle/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 40 }, message: "must NOT have more than 40 characters" }; if (vErrors === null) { vErrors = [err0]; } else { vErrors.push(err0); } errors++; } } else { const err1 = { instancePath: instancePath + "/GuildTitle", schemaPath: "#/properties/GuildTitle/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err1]; } else { vErrors.push(err1); } errors++; } } var _valid0 = _errs60 === errors; if (_valid0) { valid3 = true; passing0 = 0; } const _errs62 = errors; if (data28 !== null) { const err2 = { instancePath: instancePath + "/GuildTitle", schemaPath: "#/properties/GuildTitle/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err2]; } else { vErrors.push(err2); } errors++; } var _valid0 = _errs62 === errors; if (_valid0 && valid3) { valid3 = false; passing0 = [passing0, 1]; } else { if (_valid0) { valid3 = true; passing0 = 1; } } if (!valid3) { const err3 = { instancePath: instancePath + "/GuildTitle", schemaPath: "#/properties/GuildTitle/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err3]; } else { vErrors.push(err3); } errors++; validate16.errors = vErrors; return false; } else { errors = _errs59; if (vErrors !== null) { if (_errs59) { vErrors.length = _errs59; } else { vErrors = null; } } } var valid0 = _errs58 === errors; } else { var valid0 = true; } if (valid0) { if (data.GuildFame !== undefined) { let data29 = data.GuildFame; const _errs64 = errors; if (!((typeof data29 == "number") && (isFinite(data29)))) { validate16.errors = [{ instancePath: instancePath + "/GuildFame", schemaPath: "#/properties/GuildFame/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs64 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigName !== undefined) { let data30 = data.OrigName; const _errs66 = errors; const _errs67 = errors; let valid4 = false; let passing1 = null; const _errs68 = errors; if (errors === _errs68) { if (typeof data30 === "string") { if (func3(data30) > 60) { const err4 = { instancePath: instancePath + "/OrigName", schemaPath: "#/properties/OrigName/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 60 }, message: "must NOT have more than 60 characters" }; if (vErrors === null) { vErrors = [err4]; } else { vErrors.push(err4); } errors++; } } else { const err5 = { instancePath: instancePath + "/OrigName", schemaPath: "#/properties/OrigName/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err5]; } else { vErrors.push(err5); } errors++; } } var _valid1 = _errs68 === errors; if (_valid1) { valid4 = true; passing1 = 0; } const _errs70 = errors; if (data30 !== null) { const err6 = { instancePath: instancePath + "/OrigName", schemaPath: "#/properties/OrigName/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err6]; } else { vErrors.push(err6); } errors++; } var _valid1 = _errs70 === errors; if (_valid1 && valid4) { valid4 = false; passing1 = [passing1, 1]; } else { if (_valid1) { valid4 = true; passing1 = 1; } } if (!valid4) { const err7 = { instancePath: instancePath + "/OrigName", schemaPath: "#/properties/OrigName/oneOf", keyword: "oneOf", params: { passingSchemas: passing1 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err7]; } else { vErrors.push(err7); } errors++; validate16.errors = vErrors; return false; } else { errors = _errs67; if (vErrors !== null) { if (_errs67) { vErrors.length = _errs67; } else { vErrors = null; } } } var valid0 = _errs66 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigSex !== undefined) { let data31 = data.OrigSex; const _errs72 = errors; const _errs73 = errors; let valid5 = false; let passing2 = null; const _errs74 = errors; if (!(((data31 === "U") || (data31 === "F")) || (data31 === "M"))) { const err8 = { instancePath: instancePath + "/OrigSex", schemaPath: "/schemas/v0/characters/character-sex.json/enum", keyword: "enum", params: { allowedValues: schema28.enum }, message: "must be equal to one of the allowed values" }; if (vErrors === null) { vErrors = [err8]; } else { vErrors.push(err8); } errors++; } var _valid2 = _errs74 === errors; if (_valid2) { valid5 = true; passing2 = 0; } const _errs76 = errors; if (data31 !== null) { const err9 = { instancePath: instancePath + "/OrigSex", schemaPath: "#/properties/OrigSex/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err9]; } else { vErrors.push(err9); } errors++; } var _valid2 = _errs76 === errors; if (_valid2 && valid5) { valid5 = false; passing2 = [passing2, 1]; } else { if (_valid2) { valid5 = true; passing2 = 1; } } if (!valid5) { const err10 = { instancePath: instancePath + "/OrigSex", schemaPath: "#/properties/OrigSex/oneOf", keyword: "oneOf", params: { passingSchemas: passing2 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err10]; } else { vErrors.push(err10); } errors++; validate16.errors = vErrors; return false; } else { errors = _errs73; if (vErrors !== null) { if (_errs73) { vErrors.length = _errs73; } else { vErrors = null; } } } var valid0 = _errs72 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigRaceID !== undefined) { let data32 = data.OrigRaceID; const _errs78 = errors; if (!(((typeof data32 == "number") && (!(data32 % 1) && !isNaN(data32))) && (isFinite(data32)))) { validate16.errors = [{ instancePath: instancePath + "/OrigRaceID", schemaPath: "#/properties/OrigRaceID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs78 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigProfessionID !== undefined) { let data33 = data.OrigProfessionID; const _errs80 = errors; if (!(((typeof data33 == "number") && (!(data33 % 1) && !isNaN(data33))) && (isFinite(data33)))) { validate16.errors = [{ instancePath: instancePath + "/OrigProfessionID", schemaPath: "#/properties/OrigProfessionID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs80 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigTitle !== undefined) { let data34 = data.OrigTitle; const _errs82 = errors; const _errs83 = errors; let valid7 = false; let passing3 = null; const _errs84 = errors; if (errors === _errs84) { if (typeof data34 === "string") { if (func3(data34) > 30) { const err11 = { instancePath: instancePath + "/OrigTitle", schemaPath: "#/properties/OrigTitle/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 30 }, message: "must NOT have more than 30 characters" }; if (vErrors === null) { vErrors = [err11]; } else { vErrors.push(err11); } errors++; } } else { const err12 = { instancePath: instancePath + "/OrigTitle", schemaPath: "#/properties/OrigTitle/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err12]; } else { vErrors.push(err12); } errors++; } } var _valid3 = _errs84 === errors; if (_valid3) { valid7 = true; passing3 = 0; } const _errs86 = errors; if (data34 !== null) { const err13 = { instancePath: instancePath + "/OrigTitle", schemaPath: "#/properties/OrigTitle/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err13]; } else { vErrors.push(err13); } errors++; } var _valid3 = _errs86 === errors; if (_valid3 && valid7) { valid7 = false; passing3 = [passing3, 1]; } else { if (_valid3) { valid7 = true; passing3 = 1; } } if (!valid7) { const err14 = { instancePath: instancePath + "/OrigTitle", schemaPath: "#/properties/OrigTitle/oneOf", keyword: "oneOf", params: { passingSchemas: passing3 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err14]; } else { vErrors.push(err14); } errors++; validate16.errors = vErrors; return false; } else { errors = _errs83; if (vErrors !== null) { if (_errs83) { vErrors.length = _errs83; } else { vErrors = null; } } } var valid0 = _errs82 === errors; } else { var valid0 = true; } if (valid0) { if (data.SummonerID !== undefined) { let data35 = data.SummonerID; const _errs88 = errors; if (!(((typeof data35 == "number") && (!(data35 % 1) && !isNaN(data35))) && (isFinite(data35)))) { validate16.errors = [{ instancePath: instancePath + "/SummonerID", schemaPath: "#/properties/SummonerID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs88 === errors; } else { var valid0 = true; } if (valid0) { if (data.GameID !== undefined) { let data36 = data.GameID; const _errs90 = errors; if (!(((typeof data36 == "number") && (!(data36 % 1) && !isNaN(data36))) && (isFinite(data36)))) { validate16.errors = [{ instancePath: instancePath + "/GameID", schemaPath: "#/properties/GameID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs90 === errors; } else { var valid0 = true; } if (valid0) { if (data.CompletedQuests !== undefined) { let data37 = data.CompletedQuests; const _errs92 = errors; if (!(((typeof data37 == "number") && (!(data37 % 1) && !isNaN(data37))) && (isFinite(data37)))) { validate16.errors = [{ instancePath: instancePath + "/CompletedQuests", schemaPath: "#/properties/CompletedQuests/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs92 === errors; } else { var valid0 = true; } if (valid0) { if (data.Bounty !== undefined) { let data38 = data.Bounty; const _errs94 = errors; if (!((typeof data38 == "number") && (isFinite(data38)))) { validate16.errors = [{ instancePath: instancePath + "/Bounty", schemaPath: "#/properties/Bounty/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs94 === errors; } else { var valid0 = true; } if (valid0) { if (data.TransactionID !== undefined) { let data39 = data.TransactionID; const _errs96 = errors; const _errs97 = errors; let valid8 = false; let passing4 = null; const _errs98 = errors; if (errors === _errs98) { if (typeof data39 === "string") { if (func3(data39) > 17) { const err15 = { instancePath: instancePath + "/TransactionID", schemaPath: "#/properties/TransactionID/oneOf/0/maxLength", keyword: "maxLength", params: { limit: 17 }, message: "must NOT have more than 17 characters" }; if (vErrors === null) { vErrors = [err15]; } else { vErrors.push(err15); } errors++; } } else { const err16 = { instancePath: instancePath + "/TransactionID", schemaPath: "#/properties/TransactionID/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err16]; } else { vErrors.push(err16); } errors++; } } var _valid4 = _errs98 === errors; if (_valid4) { valid8 = true; passing4 = 0; } const _errs100 = errors; if (data39 !== null) { const err17 = { instancePath: instancePath + "/TransactionID", schemaPath: "#/properties/TransactionID/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err17]; } else { vErrors.push(err17); } errors++; } var _valid4 = _errs100 === errors; if (_valid4 && valid8) { valid8 = false; passing4 = [passing4, 1]; } else { if (_valid4) { valid8 = true; passing4 = 1; } } if (!valid8) { const err18 = { instancePath: instancePath + "/TransactionID", schemaPath: "#/properties/TransactionID/oneOf", keyword: "oneOf", params: { passingSchemas: passing4 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err18]; } else { vErrors.push(err18); } errors++; validate16.errors = vErrors; return false; } else { errors = _errs97; if (vErrors !== null) { if (_errs97) { vErrors.length = _errs97; } else { vErrors = null; } } } var valid0 = _errs96 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastActive !== undefined) { let data40 = data.LastActive; const _errs102 = errors; const _errs103 = errors; if (errors === _errs103) { if (typeof data40 === "string") { if (!pattern0.test(data40)) { validate16.errors = [{ instancePath: instancePath + "/LastActive", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/LastActive", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs102 === errors; } else { var valid0 = true; } if (valid0) { if (data.Jailed !== undefined) { let data41 = data.Jailed; const _errs105 = errors; if (!(((typeof data41 == "number") && (!(data41 % 1) && !isNaN(data41))) && (isFinite(data41)))) { validate16.errors = [{ instancePath: instancePath + "/Jailed", schemaPath: "#/properties/Jailed/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs105 === errors; } else { var valid0 = true; } if (valid0) { if (data.ReleaseDate !== undefined) { let data42 = data.ReleaseDate; const _errs107 = errors; const _errs108 = errors; let valid10 = false; let passing5 = null; const _errs109 = errors; const _errs110 = errors; if (errors === _errs110) { if (typeof data42 === "string") { if (!pattern0.test(data42)) { const err19 = { instancePath: instancePath + "/ReleaseDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err19]; } else { vErrors.push(err19); } errors++; } } else { const err20 = { instancePath: instancePath + "/ReleaseDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err20]; } else { vErrors.push(err20); } errors++; } } var _valid5 = _errs109 === errors; if (_valid5) { valid10 = true; passing5 = 0; } const _errs112 = errors; if (data42 !== null) { const err21 = { instancePath: instancePath + "/ReleaseDate", schemaPath: "#/properties/ReleaseDate/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err21]; } else { vErrors.push(err21); } errors++; } var _valid5 = _errs112 === errors; if (_valid5 && valid10) { valid10 = false; passing5 = [passing5, 1]; } else { if (_valid5) { valid10 = true; passing5 = 1; } } if (!valid10) { const err22 = { instancePath: instancePath + "/ReleaseDate", schemaPath: "#/properties/ReleaseDate/oneOf", keyword: "oneOf", params: { passingSchemas: passing5 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err22]; } else { vErrors.push(err22); } errors++; validate16.errors = vErrors; return false; } else { errors = _errs108; if (vErrors !== null) { if (_errs108) { vErrors.length = _errs108; } else { vErrors = null; } } } var valid0 = _errs107 === errors; } else { var valid0 = true; } if (valid0) { if (data.Dead !== undefined) { let data43 = data.Dead; const _errs114 = errors; if (!(((typeof data43 == "number") && (!(data43 % 1) && !isNaN(data43))) && (isFinite(data43)))) { validate16.errors = [{ instancePath: instancePath + "/Dead", schemaPath: "#/properties/Dead/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs114 === errors; } else { var valid0 = true; } if (valid0) { if (data.Quest !== undefined) { let data44 = data.Quest; const _errs116 = errors; if (!(((typeof data44 == "number") && (!(data44 % 1) && !isNaN(data44))) && (isFinite(data44)))) { validate16.errors = [{ instancePath: instancePath + "/Quest", schemaPath: "#/properties/Quest/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs116 === errors; } else { var valid0 = true; } if (valid0) { if (data.PosessedID !== undefined) { let data45 = data.PosessedID; const _errs118 = errors; if (!(((typeof data45 == "number") && (!(data45 % 1) && !isNaN(data45))) && (isFinite(data45)))) { validate16.errors = [{ instancePath: instancePath + "/PosessedID", schemaPath: "#/properties/PosessedID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs118 === errors; } else { var valid0 = true; } if (valid0) { if (data.DuelCount !== undefined) { let data46 = data.DuelCount; const _errs120 = errors; if (!(((typeof data46 == "number") && (!(data46 % 1) && !isNaN(data46))) && (isFinite(data46)))) { validate16.errors = [{ instancePath: instancePath + "/DuelCount", schemaPath: "#/properties/DuelCount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs120 === errors; } else { var valid0 = true; } if (valid0) { if (data.AvACount !== undefined) { let data47 = data.AvACount; const _errs122 = errors; if (!(((typeof data47 == "number") && (!(data47 % 1) && !isNaN(data47))) && (isFinite(data47)))) { validate16.errors = [{ instancePath: instancePath + "/AvACount", schemaPath: "#/properties/AvACount/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs122 === errors; } else { var valid0 = true; } if (valid0) { if (data.PictureID !== undefined) { let data48 = data.PictureID; const _errs124 = errors; if (errors === _errs124) { if (typeof data48 === "string") { if (func3(data48) > 15) { validate16.errors = [{ instancePath: instancePath + "/PictureID", schemaPath: "#/properties/PictureID/maxLength", keyword: "maxLength", params: { limit: 15 }, message: "must NOT have more than 15 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/PictureID", schemaPath: "#/properties/PictureID/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs124 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastChange !== undefined) { let data49 = data.LastChange; const _errs126 = errors; const _errs127 = errors; if (errors === _errs127) { if (typeof data49 === "string") { if (!pattern0.test(data49)) { validate16.errors = [{ instancePath: instancePath + "/LastChange", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/LastChange", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs126 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastAlter !== undefined) { let data50 = data.LastAlter; const _errs129 = errors; const _errs130 = errors; if (errors === _errs130) { if (typeof data50 === "string") { if (!pattern0.test(data50)) { validate16.errors = [{ instancePath: instancePath + "/LastAlter", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/LastAlter", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs129 === errors; } else { var valid0 = true; } if (valid0) { if (data.Crimes !== undefined) { let data51 = data.Crimes; const _errs132 = errors; if (!(((typeof data51 == "number") && (!(data51 % 1) && !isNaN(data51))) && (isFinite(data51)))) { validate16.errors = [{ instancePath: instancePath + "/Crimes", schemaPath: "#/properties/Crimes/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs132 === errors; } else { var valid0 = true; } if (valid0) { if (data.Building !== undefined) { let data52 = data.Building; const _errs134 = errors; if (!(((typeof data52 == "number") && (!(data52 % 1) && !isNaN(data52))) && (isFinite(data52)))) { validate16.errors = [{ instancePath: instancePath + "/Building", schemaPath: "#/properties/Building/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs134 === errors; } else { var valid0 = true; } if (valid0) { if (data.ActiveFactionID !== undefined) { let data53 = data.ActiveFactionID; const _errs136 = errors; if (!(((typeof data53 == "number") && (!(data53 % 1) && !isNaN(data53))) && (isFinite(data53)))) { validate16.errors = [{ instancePath: instancePath + "/ActiveFactionID", schemaPath: "#/properties/ActiveFactionID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs136 === errors; } else { var valid0 = true; } if (valid0) { if (data.GroupID !== undefined) { let data54 = data.GroupID; const _errs138 = errors; if (!(((typeof data54 == "number") && (!(data54 % 1) && !isNaN(data54))) && (isFinite(data54)))) { validate16.errors = [{ instancePath: instancePath + "/GroupID", schemaPath: "#/properties/GroupID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs138 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastDied !== undefined) { let data55 = data.LastDied; const _errs140 = errors; const _errs141 = errors; if (errors === _errs141) { if (typeof data55 === "string") { if (!pattern0.test(data55)) { validate16.errors = [{ instancePath: instancePath + "/LastDied", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/LastDied", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs140 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastResurrected !== undefined) { let data56 = data.LastResurrected; const _errs143 = errors; const _errs144 = errors; if (errors === _errs144) { if (typeof data56 === "string") { if (!pattern0.test(data56)) { validate16.errors = [{ instancePath: instancePath + "/LastResurrected", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/LastResurrected", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs143 === errors; } else { var valid0 = true; } if (valid0) { if (data.SpecialBonus !== undefined) { let data57 = data.SpecialBonus; const _errs146 = errors; if (!(((typeof data57 == "number") && (!(data57 % 1) && !isNaN(data57))) && (isFinite(data57)))) { validate16.errors = [{ instancePath: instancePath + "/SpecialBonus", schemaPath: "#/properties/SpecialBonus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs146 === errors; } else { var valid0 = true; } if (valid0) { if (data.Mayor !== undefined) { let data58 = data.Mayor; const _errs148 = errors; if (!(((typeof data58 == "number") && (!(data58 % 1) && !isNaN(data58))) && (isFinite(data58)))) { validate16.errors = [{ instancePath: instancePath + "/Mayor", schemaPath: "#/properties/Mayor/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs148 === errors; } else { var valid0 = true; } if (valid0) { if (data.QuestID !== undefined) { let data59 = data.QuestID; const _errs150 = errors; if (!(((typeof data59 == "number") && (!(data59 % 1) && !isNaN(data59))) && (isFinite(data59)))) { validate16.errors = [{ instancePath: instancePath + "/QuestID", schemaPath: "#/properties/QuestID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs150 === errors; } else { var valid0 = true; } if (valid0) { if (data.Tutorial !== undefined) { let data60 = data.Tutorial; const _errs152 = errors; if (!(((typeof data60 == "number") && (!(data60 % 1) && !isNaN(data60))) && (isFinite(data60)))) { validate16.errors = [{ instancePath: instancePath + "/Tutorial", schemaPath: "#/properties/Tutorial/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs152 === errors; } else { var valid0 = true; } if (valid0) { if (data.Upgrade1 !== undefined) { let data61 = data.Upgrade1; const _errs154 = errors; if (!(((typeof data61 == "number") && (!(data61 % 1) && !isNaN(data61))) && (isFinite(data61)))) { validate16.errors = [{ instancePath: instancePath + "/Upgrade1", schemaPath: "#/properties/Upgrade1/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs154 === errors; } else { var valid0 = true; } if (valid0) { if (data.Upgrade2 !== undefined) { let data62 = data.Upgrade2; const _errs156 = errors; if (!(((typeof data62 == "number") && (!(data62 % 1) && !isNaN(data62))) && (isFinite(data62)))) { validate16.errors = [{ instancePath: instancePath + "/Upgrade2", schemaPath: "#/properties/Upgrade2/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs156 === errors; } else { var valid0 = true; } if (valid0) { if (data.OA !== undefined) { let data63 = data.OA; const _errs158 = errors; if (!(((typeof data63 == "number") && (!(data63 % 1) && !isNaN(data63))) && (isFinite(data63)))) { validate16.errors = [{ instancePath: instancePath + "/OA", schemaPath: "#/properties/OA/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs158 === errors; } else { var valid0 = true; } if (valid0) { if (data.QueueBonus !== undefined) { let data64 = data.QueueBonus; const _errs160 = errors; if (!(((typeof data64 == "number") && (!(data64 % 1) && !isNaN(data64))) && (isFinite(data64)))) { validate16.errors = [{ instancePath: instancePath + "/QueueBonus", schemaPath: "#/properties/QueueBonus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs160 === errors; } else { var valid0 = true; } if (valid0) { if (data.PetBonus !== undefined) { let data65 = data.PetBonus; const _errs162 = errors; if (!(((typeof data65 == "number") && (!(data65 % 1) && !isNaN(data65))) && (isFinite(data65)))) { validate16.errors = [{ instancePath: instancePath + "/PetBonus", schemaPath: "#/properties/PetBonus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs162 === errors; } else { var valid0 = true; } if (valid0) { if (data.BuildingBonus !== undefined) { let data66 = data.BuildingBonus; const _errs164 = errors; if (!(((typeof data66 == "number") && (!(data66 % 1) && !isNaN(data66))) && (isFinite(data66)))) { validate16.errors = [{ instancePath: instancePath + "/BuildingBonus", schemaPath: "#/properties/BuildingBonus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs164 === errors; } else { var valid0 = true; } if (valid0) { if (data.VM !== undefined) { let data67 = data.VM; const _errs166 = errors; if (!(((typeof data67 == "number") && (!(data67 % 1) && !isNaN(data67))) && (isFinite(data67)))) { validate16.errors = [{ instancePath: instancePath + "/VM", schemaPath: "#/properties/VM/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs166 === errors; } else { var valid0 = true; } if (valid0) { if (data.AltPictureID !== undefined) { let data68 = data.AltPictureID; const _errs168 = errors; if (errors === _errs168) { if (typeof data68 === "string") { if (func3(data68) > 15) { validate16.errors = [{ instancePath: instancePath + "/AltPictureID", schemaPath: "#/properties/AltPictureID/maxLength", keyword: "maxLength", params: { limit: 15 }, message: "must NOT have more than 15 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/AltPictureID", schemaPath: "#/properties/AltPictureID/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs168 === errors; } else { var valid0 = true; } if (valid0) { if (data.AltPictureID2 !== undefined) { let data69 = data.AltPictureID2; const _errs170 = errors; if (errors === _errs170) { if (typeof data69 === "string") { if (func3(data69) > 15) { validate16.errors = [{ instancePath: instancePath + "/AltPictureID2", schemaPath: "#/properties/AltPictureID2/maxLength", keyword: "maxLength", params: { limit: 15 }, message: "must NOT have more than 15 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/AltPictureID2", schemaPath: "#/properties/AltPictureID2/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs170 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigItemID !== undefined) { let data70 = data.OrigItemID; const _errs172 = errors; if (!(((typeof data70 == "number") && (!(data70 % 1) && !isNaN(data70))) && (isFinite(data70)))) { validate16.errors = [{ instancePath: instancePath + "/OrigItemID", schemaPath: "#/properties/OrigItemID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs172 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigSpellID !== undefined) { let data71 = data.OrigSpellID; const _errs174 = errors; if (!(((typeof data71 == "number") && (!(data71 % 1) && !isNaN(data71))) && (isFinite(data71)))) { validate16.errors = [{ instancePath: instancePath + "/OrigSpellID", schemaPath: "#/properties/OrigSpellID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs174 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigAllegiance !== undefined) { let data72 = data.OrigAllegiance; const _errs176 = errors; if (!(((typeof data72 == "number") && (!(data72 % 1) && !isNaN(data72))) && (isFinite(data72)))) { validate16.errors = [{ instancePath: instancePath + "/OrigAllegiance", schemaPath: "#/properties/OrigAllegiance/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs176 === errors; } else { var valid0 = true; } if (valid0) { if (data.OrigMaterial !== undefined) { let data73 = data.OrigMaterial; const _errs178 = errors; if (errors === _errs178) { if (typeof data73 === "string") { if (func3(data73) > 25) { validate16.errors = [{ instancePath: instancePath + "/OrigMaterial", schemaPath: "#/properties/OrigMaterial/maxLength", keyword: "maxLength", params: { limit: 25 }, message: "must NOT have more than 25 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/OrigMaterial", schemaPath: "#/properties/OrigMaterial/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs178 === errors; } else { var valid0 = true; } if (valid0) { if (data.BonusCurrency !== undefined) { let data74 = data.BonusCurrency; const _errs180 = errors; if (!((typeof data74 == "number") && (isFinite(data74)))) { validate16.errors = [{ instancePath: instancePath + "/BonusCurrency", schemaPath: "#/properties/BonusCurrency/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs180 === errors; } else { var valid0 = true; } if (valid0) { if (data.HeldCurrency !== undefined) { let data75 = data.HeldCurrency; const _errs182 = errors; if (!((typeof data75 == "number") && (isFinite(data75)))) { validate16.errors = [{ instancePath: instancePath + "/HeldCurrency", schemaPath: "#/properties/HeldCurrency/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs182 === errors; } else { var valid0 = true; } if (valid0) { if (data.BornDate !== undefined) { let data76 = data.BornDate; const _errs184 = errors; const _errs185 = errors; if (errors === _errs185) { if (typeof data76 === "string") { if (!pattern0.test(data76)) { validate16.errors = [{ instancePath: instancePath + "/BornDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/BornDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs184 === errors; } else { var valid0 = true; } if (valid0) { if (data.Server !== undefined) { let data77 = data.Server; const _errs187 = errors; if (!(((typeof data77 == "number") && (!(data77 % 1) && !isNaN(data77))) && (isFinite(data77)))) { validate16.errors = [{ instancePath: instancePath + "/Server", schemaPath: "#/properties/Server/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs187 === errors; } else { var valid0 = true; } if (valid0) { if (data.AllowTame !== undefined) { const _errs189 = errors; if (typeof data.AllowTame !== "boolean") { validate16.errors = [{ instancePath: instancePath + "/AllowTame", schemaPath: "#/properties/AllowTame/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs189 === errors; } else { var valid0 = true; } if (valid0) { if (data.CharacterStatus !== undefined) { let data79 = data.CharacterStatus; const _errs191 = errors; if (!(((typeof data79 == "number") && (!(data79 % 1) && !isNaN(data79))) && (isFinite(data79)))) { validate16.errors = [{ instancePath: instancePath + "/CharacterStatus", schemaPath: "#/properties/CharacterStatus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs191 === errors; } else { var valid0 = true; } if (valid0) { if (data.AllowedArmor !== undefined) { let data80 = data.AllowedArmor; const _errs193 = errors; if (!(((typeof data80 == "number") && (!(data80 % 1) && !isNaN(data80))) && (isFinite(data80)))) { validate16.errors = [{ instancePath: instancePath + "/AllowedArmor", schemaPath: "#/properties/AllowedArmor/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs193 === errors; } else { var valid0 = true; } if (valid0) { if (data.Looter !== undefined) { let data81 = data.Looter; const _errs195 = errors; if (!(((typeof data81 == "number") && (!(data81 % 1) && !isNaN(data81))) && (isFinite(data81)))) { validate16.errors = [{ instancePath: instancePath + "/Looter", schemaPath: "#/properties/Looter/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs195 === errors; } else { var valid0 = true; } if (valid0) { if (data.PetPrice !== undefined) { let data82 = data.PetPrice; const _errs197 = errors; if (!((typeof data82 == "number") && (isFinite(data82)))) { validate16.errors = [{ instancePath: instancePath + "/PetPrice", schemaPath: "#/properties/PetPrice/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs197 === errors; } else { var valid0 = true; } if (valid0) { if (data.Allegiance !== undefined) { let data83 = data.Allegiance; const _errs199 = errors; if (!(((typeof data83 == "number") && (!(data83 % 1) && !isNaN(data83))) && (isFinite(data83)))) { validate16.errors = [{ instancePath: instancePath + "/Allegiance", schemaPath: "#/properties/Allegiance/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs199 === errors; } else { var valid0 = true; } if (valid0) { if (data.AllegianceValue !== undefined) { let data84 = data.AllegianceValue; const _errs201 = errors; if (!(((typeof data84 == "number") && (!(data84 % 1) && !isNaN(data84))) && (isFinite(data84)))) { validate16.errors = [{ instancePath: instancePath + "/AllegianceValue", schemaPath: "#/properties/AllegianceValue/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs201 === errors; } else { var valid0 = true; } if (valid0) { if (data.AllegianceRank !== undefined) { let data85 = data.AllegianceRank; const _errs203 = errors; if (!(((typeof data85 == "number") && (!(data85 % 1) && !isNaN(data85))) && (isFinite(data85)))) { validate16.errors = [{ instancePath: instancePath + "/AllegianceRank", schemaPath: "#/properties/AllegianceRank/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs203 === errors; } else { var valid0 = true; } if (valid0) { if (data.AllegianceTitle !== undefined) { let data86 = data.AllegianceTitle; const _errs205 = errors; if (errors === _errs205) { if (typeof data86 === "string") { if (func3(data86) > 20) { validate16.errors = [{ instancePath: instancePath + "/AllegianceTitle", schemaPath: "#/properties/AllegianceTitle/maxLength", keyword: "maxLength", params: { limit: 20 }, message: "must NOT have more than 20 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/AllegianceTitle", schemaPath: "#/properties/AllegianceTitle/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs205 === errors; } else { var valid0 = true; } if (valid0) { if (data.Discoveries !== undefined) { let data87 = data.Discoveries; const _errs207 = errors; if (!(((typeof data87 == "number") && (!(data87 % 1) && !isNaN(data87))) && (isFinite(data87)))) { validate16.errors = [{ instancePath: instancePath + "/Discoveries", schemaPath: "#/properties/Discoveries/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs207 === errors; } else { var valid0 = true; } if (valid0) { if (data.FirstRaceID !== undefined) { let data88 = data.FirstRaceID; const _errs209 = errors; if (!(((typeof data88 == "number") && (!(data88 % 1) && !isNaN(data88))) && (isFinite(data88)))) { validate16.errors = [{ instancePath: instancePath + "/FirstRaceID", schemaPath: "#/properties/FirstRaceID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs209 === errors; } else { var valid0 = true; } if (valid0) { if (data.FirstProfessionID !== undefined) { let data89 = data.FirstProfessionID; const _errs211 = errors; if (!(((typeof data89 == "number") && (!(data89 % 1) && !isNaN(data89))) && (isFinite(data89)))) { validate16.errors = [{ instancePath: instancePath + "/FirstProfessionID", schemaPath: "#/properties/FirstProfessionID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs211 === errors; } else { var valid0 = true; } if (valid0) { if (data.AccountID !== undefined) { let data90 = data.AccountID; const _errs213 = errors; if (!(((typeof data90 == "number") && (!(data90 % 1) && !isNaN(data90))) && (isFinite(data90)))) { validate16.errors = [{ instancePath: instancePath + "/AccountID", schemaPath: "#/properties/AccountID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs213 === errors; } else { var valid0 = true; } if (valid0) { if (data.DungeonMaster !== undefined) { let data91 = data.DungeonMaster; const _errs215 = errors; if (!(((typeof data91 == "number") && (!(data91 % 1) && !isNaN(data91))) && (isFinite(data91)))) { validate16.errors = [{ instancePath: instancePath + "/DungeonMaster", schemaPath: "#/properties/DungeonMaster/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs215 === errors; } else { var valid0 = true; } if (valid0) { if (data.DungeonKills !== undefined) { let data92 = data.DungeonKills; const _errs217 = errors; if (!(((typeof data92 == "number") && (!(data92 % 1) && !isNaN(data92))) && (isFinite(data92)))) { validate16.errors = [{ instancePath: instancePath + "/DungeonKills", schemaPath: "#/properties/DungeonKills/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs217 === errors; } else { var valid0 = true; } if (valid0) { if (data.DungeonDeaths !== undefined) { let data93 = data.DungeonDeaths; const _errs219 = errors; if (!(((typeof data93 == "number") && (!(data93 % 1) && !isNaN(data93))) && (isFinite(data93)))) { validate16.errors = [{ instancePath: instancePath + "/DungeonDeaths", schemaPath: "#/properties/DungeonDeaths/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs219 === errors; } else { var valid0 = true; } if (valid0) { if (data.VisibleStealthed !== undefined) { let data94 = data.VisibleStealthed; const _errs221 = errors; if (!(((typeof data94 == "number") && (!(data94 % 1) && !isNaN(data94))) && (isFinite(data94)))) { validate16.errors = [{ instancePath: instancePath + "/VisibleStealthed", schemaPath: "#/properties/VisibleStealthed/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs221 === errors; } else { var valid0 = true; } if (valid0) { if (data.VisibleDead !== undefined) { let data95 = data.VisibleDead; const _errs223 = errors; if (!(((typeof data95 == "number") && (!(data95 % 1) && !isNaN(data95))) && (isFinite(data95)))) { validate16.errors = [{ instancePath: instancePath + "/VisibleDead", schemaPath: "#/properties/VisibleDead/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs223 === errors; } else { var valid0 = true; } if (valid0) { if (data.ForSale !== undefined) { let data96 = data.ForSale; const _errs225 = errors; if (!(((typeof data96 == "number") && (!(data96 % 1) && !isNaN(data96))) && (isFinite(data96)))) { validate16.errors = [{ instancePath: instancePath + "/ForSale", schemaPath: "#/properties/ForSale/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs225 === errors; } else { var valid0 = true; } if (valid0) { if (data.BankBonus !== undefined) { let data97 = data.BankBonus; const _errs227 = errors; if (!(((typeof data97 == "number") && (!(data97 % 1) && !isNaN(data97))) && (isFinite(data97)))) { validate16.errors = [{ instancePath: instancePath + "/BankBonus", schemaPath: "#/properties/BankBonus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs227 === errors; } else { var valid0 = true; } if (valid0) { if (data.Captures !== undefined) { let data98 = data.Captures; const _errs229 = errors; if (!(((typeof data98 == "number") && (!(data98 % 1) && !isNaN(data98))) && (isFinite(data98)))) { validate16.errors = [{ instancePath: instancePath + "/Captures", schemaPath: "#/properties/Captures/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs229 === errors; } else { var valid0 = true; } if (valid0) { if (data.UnresolvedFights !== undefined) { let data99 = data.UnresolvedFights; const _errs231 = errors; if (!(((typeof data99 == "number") && (!(data99 % 1) && !isNaN(data99))) && (isFinite(data99)))) { validate16.errors = [{ instancePath: instancePath + "/UnresolvedFights", schemaPath: "#/properties/UnresolvedFights/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs231 === errors; } else { var valid0 = true; } if (valid0) { if (data.FontColor !== undefined) { let data100 = data.FontColor; const _errs233 = errors; if (errors === _errs233) { if (typeof data100 === "string") { if (func3(data100) > 6) { validate16.errors = [{ instancePath: instancePath + "/FontColor", schemaPath: "#/properties/FontColor/maxLength", keyword: "maxLength", params: { limit: 6 }, message: "must NOT have more than 6 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/FontColor", schemaPath: "#/properties/FontColor/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs233 === errors; } else { var valid0 = true; } if (valid0) { if (data.FontSize !== undefined) { let data101 = data.FontSize; const _errs235 = errors; if (!(((typeof data101 == "number") && (!(data101 % 1) && !isNaN(data101))) && (isFinite(data101)))) { validate16.errors = [{ instancePath: instancePath + "/FontSize", schemaPath: "#/properties/FontSize/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs235 === errors; } else { var valid0 = true; } if (valid0) { if (data.FontName !== undefined) { let data102 = data.FontName; const _errs237 = errors; if (errors === _errs237) { if (typeof data102 === "string") { if (func3(data102) > 15) { validate16.errors = [{ instancePath: instancePath + "/FontName", schemaPath: "#/properties/FontName/maxLength", keyword: "maxLength", params: { limit: 15 }, message: "must NOT have more than 15 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/FontName", schemaPath: "#/properties/FontName/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs237 === errors; } else { var valid0 = true; } if (valid0) { if (data.CharacterMenu !== undefined) { let data103 = data.CharacterMenu; const _errs239 = errors; if (!(((typeof data103 == "number") && (!(data103 % 1) && !isNaN(data103))) && (isFinite(data103)))) { validate16.errors = [{ instancePath: instancePath + "/CharacterMenu", schemaPath: "#/properties/CharacterMenu/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs239 === errors; } else { var valid0 = true; } if (valid0) { if (data.TownMapID !== undefined) { let data104 = data.TownMapID; const _errs241 = errors; if (!(((typeof data104 == "number") && (!(data104 % 1) && !isNaN(data104))) && (isFinite(data104)))) { validate16.errors = [{ instancePath: instancePath + "/TownMapID", schemaPath: "#/properties/TownMapID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs241 === errors; } else { var valid0 = true; } if (valid0) { if (data.ScriptID !== undefined) { let data105 = data.ScriptID; const _errs243 = errors; if (!(((typeof data105 == "number") && (!(data105 % 1) && !isNaN(data105))) && (isFinite(data105)))) { validate16.errors = [{ instancePath: instancePath + "/ScriptID", schemaPath: "#/properties/ScriptID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs243 === errors; } else { var valid0 = true; } if (valid0) { if (data.SkillValue1 !== undefined) { let data106 = data.SkillValue1; const _errs245 = errors; if (!(((typeof data106 == "number") && (!(data106 % 1) && !isNaN(data106))) && (isFinite(data106)))) { validate16.errors = [{ instancePath: instancePath + "/SkillValue1", schemaPath: "#/properties/SkillValue1/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs245 === errors; } else { var valid0 = true; } if (valid0) { if (data.SkillValue2 !== undefined) { let data107 = data.SkillValue2; const _errs247 = errors; if (!(((typeof data107 == "number") && (!(data107 % 1) && !isNaN(data107))) && (isFinite(data107)))) { validate16.errors = [{ instancePath: instancePath + "/SkillValue2", schemaPath: "#/properties/SkillValue2/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs247 === errors; } else { var valid0 = true; } if (valid0) { if (data.DM !== undefined) { let data108 = data.DM; const _errs249 = errors; if (!(((typeof data108 == "number") && (!(data108 % 1) && !isNaN(data108))) && (isFinite(data108)))) { validate16.errors = [{ instancePath: instancePath + "/DM", schemaPath: "#/properties/DM/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs249 === errors; } else { var valid0 = true; } if (valid0) { if (data.LegendToken !== undefined) { let data109 = data.LegendToken; const _errs251 = errors; if (!(((typeof data109 == "number") && (!(data109 % 1) && !isNaN(data109))) && (isFinite(data109)))) { validate16.errors = [{ instancePath: instancePath + "/LegendToken", schemaPath: "#/properties/LegendToken/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs251 === errors; } else { var valid0 = true; } if (valid0) { if (data.LegendTotalTokens !== undefined) { let data110 = data.LegendTotalTokens; const _errs253 = errors; if (!(((typeof data110 == "number") && (!(data110 % 1) && !isNaN(data110))) && (isFinite(data110)))) { validate16.errors = [{ instancePath: instancePath + "/LegendTotalTokens", schemaPath: "#/properties/LegendTotalTokens/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs253 === errors; } else { var valid0 = true; } if (valid0) { if (data.VisibleLevel !== undefined) { let data111 = data.VisibleLevel; const _errs255 = errors; if (!(((typeof data111 == "number") && (!(data111 % 1) && !isNaN(data111))) && (isFinite(data111)))) { validate16.errors = [{ instancePath: instancePath + "/VisibleLevel", schemaPath: "#/properties/VisibleLevel/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs255 === errors; } else { var valid0 = true; } if (valid0) { if (data.Taunt !== undefined) { let data112 = data.Taunt; const _errs257 = errors; if (!(((typeof data112 == "number") && (!(data112 % 1) && !isNaN(data112))) && (isFinite(data112)))) { validate16.errors = [{ instancePath: instancePath + "/Taunt", schemaPath: "#/properties/Taunt/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs257 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastLogout !== undefined) { let data113 = data.LastLogout; const _errs259 = errors; const _errs260 = errors; let valid17 = false; let passing6 = null; const _errs261 = errors; const _errs262 = errors; if (errors === _errs262) { if (typeof data113 === "string") { if (!pattern0.test(data113)) { const err23 = { instancePath: instancePath + "/LastLogout", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err23]; } else { vErrors.push(err23); } errors++; } } else { const err24 = { instancePath: instancePath + "/LastLogout", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err24]; } else { vErrors.push(err24); } errors++; } } var _valid6 = _errs261 === errors; if (_valid6) { valid17 = true; passing6 = 0; } const _errs264 = errors; if (data113 !== null) { const err25 = { instancePath: instancePath + "/LastLogout", schemaPath: "#/properties/LastLogout/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err25]; } else { vErrors.push(err25); } errors++; } var _valid6 = _errs264 === errors; if (_valid6 && valid17) { valid17 = false; passing6 = [passing6, 1]; } else { if (_valid6) { valid17 = true; passing6 = 1; } } if (!valid17) { const err26 = { instancePath: instancePath + "/LastLogout", schemaPath: "#/properties/LastLogout/oneOf", keyword: "oneOf", params: { passingSchemas: passing6 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err26]; } else { vErrors.push(err26); } errors++; validate16.errors = vErrors; return false; } else { errors = _errs260; if (vErrors !== null) { if (_errs260) { vErrors.length = _errs260; } else { vErrors = null; } } } var valid0 = _errs259 === errors; } else { var valid0 = true; } if (valid0) { if (data.PlayerLegend !== undefined) { let data114 = data.PlayerLegend; const _errs266 = errors; if (!(((typeof data114 == "number") && (!(data114 % 1) && !isNaN(data114))) && (isFinite(data114)))) { validate16.errors = [{ instancePath: instancePath + "/PlayerLegend", schemaPath: "#/properties/PlayerLegend/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs266 === errors; } else { var valid0 = true; } if (valid0) { if (data.PKCountTotal !== undefined) { let data115 = data.PKCountTotal; const _errs268 = errors; if (!(((typeof data115 == "number") && (!(data115 % 1) && !isNaN(data115))) && (isFinite(data115)))) { validate16.errors = [{ instancePath: instancePath + "/PKCountTotal", schemaPath: "#/properties/PKCountTotal/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs268 === errors; } else { var valid0 = true; } if (valid0) { if (data.EOff !== undefined) { let data116 = data.EOff; const _errs270 = errors; if (!(((typeof data116 == "number") && (!(data116 % 1) && !isNaN(data116))) && (isFinite(data116)))) { validate16.errors = [{ instancePath: instancePath + "/EOff", schemaPath: "#/properties/EOff/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs270 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastPlayerKilled !== undefined) { let data117 = data.LastPlayerKilled; const _errs272 = errors; const _errs273 = errors; let valid19 = false; let passing7 = null; const _errs274 = errors; const _errs275 = errors; if (errors === _errs275) { if (typeof data117 === "string") { if (!pattern0.test(data117)) { const err27 = { instancePath: instancePath + "/LastPlayerKilled", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }; if (vErrors === null) { vErrors = [err27]; } else { vErrors.push(err27); } errors++; } } else { const err28 = { instancePath: instancePath + "/LastPlayerKilled", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }; if (vErrors === null) { vErrors = [err28]; } else { vErrors.push(err28); } errors++; } } var _valid7 = _errs274 === errors; if (_valid7) { valid19 = true; passing7 = 0; } const _errs277 = errors; if (data117 !== null) { const err29 = { instancePath: instancePath + "/LastPlayerKilled", schemaPath: "#/properties/LastPlayerKilled/oneOf/1/type", keyword: "type", params: { type: "null" }, message: "must be null" }; if (vErrors === null) { vErrors = [err29]; } else { vErrors.push(err29); } errors++; } var _valid7 = _errs277 === errors; if (_valid7 && valid19) { valid19 = false; passing7 = [passing7, 1]; } else { if (_valid7) { valid19 = true; passing7 = 1; } } if (!valid19) { const err30 = { instancePath: instancePath + "/LastPlayerKilled", schemaPath: "#/properties/LastPlayerKilled/oneOf", keyword: "oneOf", params: { passingSchemas: passing7 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err30]; } else { vErrors.push(err30); } errors++; validate16.errors = vErrors; return false; } else { errors = _errs273; if (vErrors !== null) { if (_errs273) { vErrors.length = _errs273; } else { vErrors = null; } } } var valid0 = _errs272 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastLevelled !== undefined) { let data118 = data.LastLevelled; const _errs279 = errors; const _errs280 = errors; if (errors === _errs280) { if (typeof data118 === "string") { if (!pattern0.test(data118)) { validate16.errors = [{ instancePath: instancePath + "/LastLevelled", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/LastLevelled", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs279 === errors; } else { var valid0 = true; } if (valid0) { if (data.SubLevel !== undefined) { let data119 = data.SubLevel; const _errs282 = errors; if (!(((typeof data119 == "number") && (!(data119 % 1) && !isNaN(data119))) && (isFinite(data119)))) { validate16.errors = [{ instancePath: instancePath + "/SubLevel", schemaPath: "#/properties/SubLevel/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs282 === errors; } else { var valid0 = true; } if (valid0) { if (data.SubLevelPoints !== undefined) { let data120 = data.SubLevelPoints; const _errs284 = errors; if (!(((typeof data120 == "number") && (!(data120 % 1) && !isNaN(data120))) && (isFinite(data120)))) { validate16.errors = [{ instancePath: instancePath + "/SubLevelPoints", schemaPath: "#/properties/SubLevelPoints/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs284 === errors; } else { var valid0 = true; } if (valid0) { if (data.Thefts !== undefined) { let data121 = data.Thefts; const _errs286 = errors; if (!(((typeof data121 == "number") && (!(data121 % 1) && !isNaN(data121))) && (isFinite(data121)))) { validate16.errors = [{ instancePath: instancePath + "/Thefts", schemaPath: "#/properties/Thefts/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs286 === errors; } else { var valid0 = true; } if (valid0) { if (data.UnreadMail !== undefined) { let data122 = data.UnreadMail; const _errs288 = errors; if (!(((typeof data122 == "number") && (!(data122 % 1) && !isNaN(data122))) && (isFinite(data122)))) { validate16.errors = [{ instancePath: instancePath + "/UnreadMail", schemaPath: "#/properties/UnreadMail/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs288 === errors; } else { var valid0 = true; } if (valid0) { if (data.Spawner !== undefined) { let data123 = data.Spawner; const _errs290 = errors; if (!(((typeof data123 == "number") && (!(data123 % 1) && !isNaN(data123))) && (isFinite(data123)))) { validate16.errors = [{ instancePath: instancePath + "/Spawner", schemaPath: "#/properties/Spawner/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs290 === errors; } else { var valid0 = true; } if (valid0) { if (data.LastDiedBuilding !== undefined) { let data124 = data.LastDiedBuilding; const _errs292 = errors; if (!(((typeof data124 == "number") && (!(data124 % 1) && !isNaN(data124))) && (isFinite(data124)))) { validate16.errors = [{ instancePath: instancePath + "/LastDiedBuilding", schemaPath: "#/properties/LastDiedBuilding/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs292 === errors; } else { var valid0 = true; } if (valid0) { if (data.AllowRide !== undefined) { const _errs294 = errors; if (typeof data.AllowRide !== "boolean") { validate16.errors = [{ instancePath: instancePath + "/AllowRide", schemaPath: "#/properties/AllowRide/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs294 === errors; } else { var valid0 = true; } if (valid0) { if (data.TreasureHuntTotal !== undefined) { let data126 = data.TreasureHuntTotal; const _errs296 = errors; if (!(((typeof data126 == "number") && (!(data126 % 1) && !isNaN(data126))) && (isFinite(data126)))) { validate16.errors = [{ instancePath: instancePath + "/TreasureHuntTotal", schemaPath: "#/properties/TreasureHuntTotal/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs296 === errors; } else { var valid0 = true; } if (valid0) { if (data.ActualClass !== undefined) { let data127 = data.ActualClass; const _errs298 = errors; if (errors === _errs298) { if (typeof data127 === "string") { if (func3(data127) > 15) { validate16.errors = [{ instancePath: instancePath + "/ActualClass", schemaPath: "#/properties/ActualClass/maxLength", keyword: "maxLength", params: { limit: 15 }, message: "must NOT have more than 15 characters" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/ActualClass", schemaPath: "#/properties/ActualClass/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs298 === errors; } else { var valid0 = true; } if (valid0) { if (data.LootMoneyBonus !== undefined) { let data128 = data.LootMoneyBonus; const _errs300 = errors; if (!((typeof data128 == "number") && (isFinite(data128)))) { validate16.errors = [{ instancePath: instancePath + "/LootMoneyBonus", schemaPath: "#/properties/LootMoneyBonus/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs300 === errors; } else { var valid0 = true; } if (valid0) { if (data.LootItemBonus !== undefined) { let data129 = data.LootItemBonus; const _errs302 = errors; if (!(((typeof data129 == "number") && (!(data129 % 1) && !isNaN(data129))) && (isFinite(data129)))) { validate16.errors = [{ instancePath: instancePath + "/LootItemBonus", schemaPath: "#/properties/LootItemBonus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs302 === errors; } else { var valid0 = true; } if (valid0) { if (data.GuildMessages !== undefined) { let data130 = data.GuildMessages; const _errs304 = errors; if (!(((typeof data130 == "number") && (!(data130 % 1) && !isNaN(data130))) && (isFinite(data130)))) { validate16.errors = [{ instancePath: instancePath + "/GuildMessages", schemaPath: "#/properties/GuildMessages/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs304 === errors; } else { var valid0 = true; } if (valid0) { if (data.AllegianceMessages !== undefined) { let data131 = data.AllegianceMessages; const _errs306 = errors; if (!(((typeof data131 == "number") && (!(data131 % 1) && !isNaN(data131))) && (isFinite(data131)))) { validate16.errors = [{ instancePath: instancePath + "/AllegianceMessages", schemaPath: "#/properties/AllegianceMessages/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs306 === errors; } else { var valid0 = true; } if (valid0) { if (data.QueueTimeBonus !== undefined) { let data132 = data.QueueTimeBonus; const _errs308 = errors; if (!(((typeof data132 == "number") && (!(data132 % 1) && !isNaN(data132))) && (isFinite(data132)))) { validate16.errors = [{ instancePath: instancePath + "/QueueTimeBonus", schemaPath: "#/properties/QueueTimeBonus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs308 === errors; } else { var valid0 = true; } if (valid0) { if (data.QueueItemBonus !== undefined) { let data133 = data.QueueItemBonus; const _errs310 = errors; if (!(((typeof data133 == "number") && (!(data133 % 1) && !isNaN(data133))) && (isFinite(data133)))) { validate16.errors = [{ instancePath: instancePath + "/QueueItemBonus", schemaPath: "#/properties/QueueItemBonus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs310 === errors; } else { var valid0 = true; } if (valid0) { if (data.PirateNotoriety !== undefined) { let data134 = data.PirateNotoriety; const _errs312 = errors; if (!(((typeof data134 == "number") && (!(data134 % 1) && !isNaN(data134))) && (isFinite(data134)))) { validate16.errors = [{ instancePath: instancePath + "/PirateNotoriety", schemaPath: "#/properties/PirateNotoriety/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs312 === errors; } else { var valid0 = true; } if (valid0) { if (data.PirateFame !== undefined) { let data135 = data.PirateFame; const _errs314 = errors; if (!(((typeof data135 == "number") && (!(data135 % 1) && !isNaN(data135))) && (isFinite(data135)))) { validate16.errors = [{ instancePath: instancePath + "/PirateFame", schemaPath: "#/properties/PirateFame/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs314 === errors; } else { var valid0 = true; } if (valid0) { if (data.PirateMoney !== undefined) { let data136 = data.PirateMoney; const _errs316 = errors; if (!((typeof data136 == "number") && (isFinite(data136)))) { validate16.errors = [{ instancePath: instancePath + "/PirateMoney", schemaPath: "#/properties/PirateMoney/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs316 === errors; } else { var valid0 = true; } if (valid0) { if (data.PirateRank !== undefined) { let data137 = data.PirateRank; const _errs318 = errors; if (!(((typeof data137 == "number") && (!(data137 % 1) && !isNaN(data137))) && (isFinite(data137)))) { validate16.errors = [{ instancePath: instancePath + "/PirateRank", schemaPath: "#/properties/PirateRank/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs318 === errors; } else { var valid0 = true; } if (valid0) { if (data.CurrentFactionID !== undefined) { let data138 = data.CurrentFactionID; const _errs320 = errors; if (!(((typeof data138 == "number") && (!(data138 % 1) && !isNaN(data138))) && (isFinite(data138)))) { validate16.errors = [{ instancePath: instancePath + "/CurrentFactionID", schemaPath: "#/properties/CurrentFactionID/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs320 === errors; } else { var valid0 = true; } if (valid0) { if (data.HasPets !== undefined) { let data139 = data.HasPets; const _errs322 = errors; if (!(((typeof data139 == "number") && (!(data139 % 1) && !isNaN(data139))) && (isFinite(data139)))) { validate16.errors = [{ instancePath: instancePath + "/HasPets", schemaPath: "#/properties/HasPets/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs322 === errors; } else { var valid0 = true; } if (valid0) { if (data.PvPFame !== undefined) { let data140 = data.PvPFame; const _errs324 = errors; if (!(((typeof data140 == "number") && (!(data140 % 1) && !isNaN(data140))) && (isFinite(data140)))) { validate16.errors = [{ instancePath: instancePath + "/PvPFame", schemaPath: "#/properties/PvPFame/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs324 === errors; } else { var valid0 = true; } if (valid0) { if (data.PvPRank !== undefined) { let data141 = data.PvPRank; const _errs326 = errors; if (!(((typeof data141 == "number") && (!(data141 % 1) && !isNaN(data141))) && (isFinite(data141)))) { validate16.errors = [{ instancePath: instancePath + "/PvPRank", schemaPath: "#/properties/PvPRank/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs326 === errors; } else { var valid0 = true; } if (valid0) { if (data.PVPStatus !== undefined) { let data142 = data.PVPStatus; const _errs328 = errors; if (!(((typeof data142 == "number") && (!(data142 % 1) && !isNaN(data142))) && (isFinite(data142)))) { validate16.errors = [{ instancePath: instancePath + "/PVPStatus", schemaPath: "#/properties/PVPStatus/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs328 === errors; } else { var valid0 = true; } if (valid0) { if (data.PvPDate !== undefined) { let data143 = data.PvPDate; const _errs330 = errors; const _errs331 = errors; if (errors === _errs331) { if (typeof data143 === "string") { if (!pattern0.test(data143)) { validate16.errors = [{ instancePath: instancePath + "/PvPDate", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate16.errors = [{ instancePath: instancePath + "/PvPDate", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs330 === errors; } else { var valid0 = true; } if (valid0) { if (data.BeenPossessed !== undefined) { let data144 = data.BeenPossessed; const _errs333 = errors; if (!(((typeof data144 == "number") && (!(data144 % 1) && !isNaN(data144))) && (isFinite(data144)))) { validate16.errors = [{ instancePath: instancePath + "/BeenPossessed", schemaPath: "#/properties/BeenPossessed/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs333 === errors; } else { var valid0 = true; } if (valid0) { if (data.DemonPower !== undefined) { let data145 = data.DemonPower; const _errs335 = errors; if (!(((typeof data145 == "number") && (!(data145 % 1) && !isNaN(data145))) && (isFinite(data145)))) { validate16.errors = [{ instancePath: instancePath + "/DemonPower", schemaPath: "#/properties/DemonPower/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs335 === errors; } else { var valid0 = true; } if (valid0) { if (data.StableSlots !== undefined) { let data146 = data.StableSlots; const _errs337 = errors; if (!(((typeof data146 == "number") && (!(data146 % 1) && !isNaN(data146))) && (isFinite(data146)))) { validate16.errors = [{ instancePath: instancePath + "/StableSlots", schemaPath: "#/properties/StableSlots/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs337 === errors; } else { var valid0 = true; } if (valid0) { if (data.QuestOrTrophy !== undefined) { let data147 = data.QuestOrTrophy; const _errs339 = errors; if (!(((typeof data147 == "number") && (!(data147 % 1) && !isNaN(data147))) && (isFinite(data147)))) { validate16.errors = [{ instancePath: instancePath + "/QuestOrTrophy", schemaPath: "#/properties/QuestOrTrophy/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs339 === errors; } else { var valid0 = true; } if (valid0) { if (data.MobileCharacter !== undefined) { let data148 = data.MobileCharacter; const _errs341 = errors; if (!(((typeof data148 == "number") && (!(data148 % 1) && !isNaN(data148))) && (isFinite(data148)))) { validate16.errors = [{ instancePath: instancePath + "/MobileCharacter", schemaPath: "#/properties/MobileCharacter/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs341 === errors; } else { var valid0 = true; } if (valid0) { if (data.MobileFilter !== undefined) { let data149 = data.MobileFilter; const _errs343 = errors; if (!(((typeof data149 == "number") && (!(data149 % 1) && !isNaN(data149))) && (isFinite(data149)))) { validate16.errors = [{ instancePath: instancePath + "/MobileFilter", schemaPath: "#/properties/MobileFilter/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs343 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } else { validate16.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate16.errors = vErrors; return errors === 0; } export const validateDateTime = validate17; function validate17(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) { if (typeof data === "string") { if (!pattern0.test(data)) { validate17.errors = [{ instancePath, schemaPath: "#/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate17.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } validate17.errors = vErrors; return errors === 0; } export const validateFightRoundLog = validate18; const schema45 = { "$id": "https://data.landsofhope.com/schemas/v0/fights/fight-round-log.json", "title": "FightRoundLog", "type": "object", "additionalProperties": false, "properties": { "$type": { "const": "/v0/fights/fight-round-log" }, "roundLogHtml": { "type": "string" } }, "required": ["$type", "roundLogHtml"] }; function validate18(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.$type === undefined) && (missing0 = "$type")) || ((data.roundLogHtml === undefined) && (missing0 = "roundLogHtml"))) { validate18.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "$type") || (key0 === "roundLogHtml"))) { validate18.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.$type !== undefined) { const _errs2 = errors; if ("/v0/fights/fight-round-log" !== data.$type) { validate18.errors = [{ instancePath: instancePath + "/$type", schemaPath: "#/properties/%24type/const", keyword: "const", params: { allowedValue: "/v0/fights/fight-round-log" }, message: "must be equal to constant" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.roundLogHtml !== undefined) { const _errs3 = errors; if (typeof data.roundLogHtml !== "string") { validate18.errors = [{ instancePath: instancePath + "/roundLogHtml", schemaPath: "#/properties/roundLogHtml/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs3 === errors; } else { var valid0 = true; } } } } } else { validate18.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate18.errors = vErrors; return errors === 0; } export const validateFightSessionId = validate19; const schema46 = { "$id": "https://data.landsofhope.com/schemas/v0/fights/fight-session-id.json", "title": "FightSessionId", "type": "number" }; function validate19(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (!((typeof data == "number") && (isFinite(data)))) { validate19.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } validate19.errors = vErrors; return errors === 0; } export const validateFightSession = validate20; const schema47 = { "$id": "https://data.landsofhope.com/schemas/v0/fights/fight-session.json", "title": "FightSession", "type": "object", "additionalProperties": false, "properties": { "$type": { "const": "/v0/fights/fight-session" }, "id": { "$ref": "/schemas/v0/fights/fight-session-id.json" }, "leftF": { "type": "integer" }, "rightF": { "type": "integer" }, "sessionDateTime": { "$ref": "/schemas/v0/datetime.json" }, "sessionStarter": { "type": "integer" }, "monsterFight": { "type": "boolean" } }, "required": ["$type", "id", "leftF", "rightF", "sessionDateTime", "sessionStarter", "monsterFight"] }; function validate20(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((((((data.$type === undefined) && (missing0 = "$type")) || ((data.id === undefined) && (missing0 = "id"))) || ((data.leftF === undefined) && (missing0 = "leftF"))) || ((data.rightF === undefined) && (missing0 = "rightF"))) || ((data.sessionDateTime === undefined) && (missing0 = "sessionDateTime"))) || ((data.sessionStarter === undefined) && (missing0 = "sessionStarter"))) || ((data.monsterFight === undefined) && (missing0 = "monsterFight"))) { validate20.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "$type") || (key0 === "id")) || (key0 === "leftF")) || (key0 === "rightF")) || (key0 === "sessionDateTime")) || (key0 === "sessionStarter")) || (key0 === "monsterFight"))) { validate20.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.$type !== undefined) { const _errs2 = errors; if ("/v0/fights/fight-session" !== data.$type) { validate20.errors = [{ instancePath: instancePath + "/$type", schemaPath: "#/properties/%24type/const", keyword: "const", params: { allowedValue: "/v0/fights/fight-session" }, message: "must be equal to constant" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.id !== undefined) { let data1 = data.id; const _errs3 = errors; if (!((typeof data1 == "number") && (isFinite(data1)))) { validate20.errors = [{ instancePath: instancePath + "/id", schemaPath: "/schemas/v0/fights/fight-session-id.json/type", keyword: "type", params: { type: "number" }, message: "must be number" }]; return false; } var valid0 = _errs3 === errors; } else { var valid0 = true; } if (valid0) { if (data.leftF !== undefined) { let data2 = data.leftF; const _errs6 = errors; if (!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))) { validate20.errors = [{ instancePath: instancePath + "/leftF", schemaPath: "#/properties/leftF/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.rightF !== undefined) { let data3 = data.rightF; const _errs8 = errors; if (!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))) { validate20.errors = [{ instancePath: instancePath + "/rightF", schemaPath: "#/properties/rightF/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.sessionDateTime !== undefined) { let data4 = data.sessionDateTime; const _errs10 = errors; const _errs11 = errors; if (errors === _errs11) { if (typeof data4 === "string") { if (!pattern0.test(data4)) { validate20.errors = [{ instancePath: instancePath + "/sessionDateTime", schemaPath: "/schemas/v0/datetime.json/pattern", keyword: "pattern", params: { pattern: "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" }, message: "must match pattern \"" + "^\\d{4}(.\\d{2}){2}(\\s|T)(\\d{2}.){2}\\d{2}" + "\"" }]; return false; } } else { validate20.errors = [{ instancePath: instancePath + "/sessionDateTime", schemaPath: "/schemas/v0/datetime.json/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.sessionStarter !== undefined) { let data5 = data.sessionStarter; const _errs13 = errors; if (!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))) { validate20.errors = [{ instancePath: instancePath + "/sessionStarter", schemaPath: "#/properties/sessionStarter/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.monsterFight !== undefined) { const _errs15 = errors; if (typeof data.monsterFight !== "boolean") { validate20.errors = [{ instancePath: instancePath + "/monsterFight", schemaPath: "#/properties/monsterFight/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs15 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate20.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate20.errors = vErrors; return errors === 0; }